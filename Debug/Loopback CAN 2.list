
Loopback CAN 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008edc  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009120  08009120  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  08009120  08009120  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009120  08009120  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009120  08009120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009124  08009124  00019124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c58  200001f8  08009320  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e50  08009320  00021e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c1c  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fab  00000000  00000000  00040e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00044df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001390  00000000  00000000  00046338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dce1  00000000  00000000  000476c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019625  00000000  00000000  000753a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109bba  00000000  00000000  0008e9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00198588  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b8  00000000  00000000  001985dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	200001f8 	.word	0x200001f8
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08009080 	.word	0x08009080

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	200001fc 	.word	0x200001fc
 80001f8:	08009080 	.word	0x08009080

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b08a      	sub	sp, #40	; 0x28
 8000210:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000212:	4b27      	ldr	r3, [pc, #156]	; (80002b0 <MX_CAN1_Init+0xa4>)
 8000214:	4a27      	ldr	r2, [pc, #156]	; (80002b4 <MX_CAN1_Init+0xa8>)
 8000216:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000218:	4b25      	ldr	r3, [pc, #148]	; (80002b0 <MX_CAN1_Init+0xa4>)
 800021a:	2202      	movs	r2, #2
 800021c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800021e:	4b24      	ldr	r3, [pc, #144]	; (80002b0 <MX_CAN1_Init+0xa4>)
 8000220:	2200      	movs	r2, #0
 8000222:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <MX_CAN1_Init+0xa4>)
 8000226:	2200      	movs	r2, #0
 8000228:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800022a:	4b21      	ldr	r3, [pc, #132]	; (80002b0 <MX_CAN1_Init+0xa4>)
 800022c:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000230:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000232:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <MX_CAN1_Init+0xa4>)
 8000234:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000238:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800023a:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <MX_CAN1_Init+0xa4>)
 800023c:	2200      	movs	r2, #0
 800023e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <MX_CAN1_Init+0xa4>)
 8000242:	2200      	movs	r2, #0
 8000244:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000246:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <MX_CAN1_Init+0xa4>)
 8000248:	2200      	movs	r2, #0
 800024a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800024c:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <MX_CAN1_Init+0xa4>)
 800024e:	2200      	movs	r2, #0
 8000250:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <MX_CAN1_Init+0xa4>)
 8000254:	2200      	movs	r2, #0
 8000256:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000258:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <MX_CAN1_Init+0xa4>)
 800025a:	2200      	movs	r2, #0
 800025c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800025e:	4814      	ldr	r0, [pc, #80]	; (80002b0 <MX_CAN1_Init+0xa4>)
 8000260:	f000 fe4c 	bl	8000efc <HAL_CAN_Init>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800026a:	f000 fbe5 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000272:	2300      	movs	r3, #0
 8000274:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000276:	2301      	movs	r3, #1
 8000278:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800027a:	2300      	movs	r3, #0
 800027c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800028e:	2301      	movs	r3, #1
 8000290:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000292:	463b      	mov	r3, r7
 8000294:	4619      	mov	r1, r3
 8000296:	4806      	ldr	r0, [pc, #24]	; (80002b0 <MX_CAN1_Init+0xa4>)
 8000298:	f000 ff2b 	bl	80010f2 <HAL_CAN_ConfigFilter>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_CAN1_Init+0x9a>
    Error_Handler();
 80002a2:	f000 fbc9 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	3728      	adds	r7, #40	; 0x28
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000448 	.word	0x20000448
 80002b4:	40006400 	.word	0x40006400

080002b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08a      	sub	sp, #40	; 0x28
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a1b      	ldr	r2, [pc, #108]	; (8000344 <HAL_CAN_MspInit+0x8c>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d12f      	bne.n	800033a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002da:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <HAL_CAN_MspInit+0x90>)
 80002dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002de:	4a1a      	ldr	r2, [pc, #104]	; (8000348 <HAL_CAN_MspInit+0x90>)
 80002e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002e4:	6593      	str	r3, [r2, #88]	; 0x58
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <HAL_CAN_MspInit+0x90>)
 80002e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002ee:	613b      	str	r3, [r7, #16]
 80002f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <HAL_CAN_MspInit+0x90>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	4a14      	ldr	r2, [pc, #80]	; (8000348 <HAL_CAN_MspInit+0x90>)
 80002f8:	f043 0308 	orr.w	r3, r3, #8
 80002fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <HAL_CAN_MspInit+0x90>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	f003 0308 	and.w	r3, r3, #8
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800030a:	2303      	movs	r3, #3
 800030c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800030e:	2302      	movs	r3, #2
 8000310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000316:	2302      	movs	r3, #2
 8000318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800031a:	2309      	movs	r3, #9
 800031c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	4619      	mov	r1, r3
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <HAL_CAN_MspInit+0x94>)
 8000326:	f001 fdd1 	bl	8001ecc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	2014      	movs	r0, #20
 8000330:	f001 fd87 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000334:	2014      	movs	r0, #20
 8000336:	f001 fda0 	bl	8001e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800033a:	bf00      	nop
 800033c:	3728      	adds	r7, #40	; 0x28
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40006400 	.word	0x40006400
 8000348:	40021000 	.word	0x40021000
 800034c:	48000c00 	.word	0x48000c00

08000350 <MX_GPIO_Init>:
     PD9   ------> USART3_RX
     PG7   ------> LPUART1_TX
     PG8   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08c      	sub	sp, #48	; 0x30
 8000354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 031c 	add.w	r3, r7, #28
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000366:	4b66      	ldr	r3, [pc, #408]	; (8000500 <MX_GPIO_Init+0x1b0>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	4a65      	ldr	r2, [pc, #404]	; (8000500 <MX_GPIO_Init+0x1b0>)
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000372:	4b63      	ldr	r3, [pc, #396]	; (8000500 <MX_GPIO_Init+0x1b0>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	f003 0304 	and.w	r3, r3, #4
 800037a:	61bb      	str	r3, [r7, #24]
 800037c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800037e:	4b60      	ldr	r3, [pc, #384]	; (8000500 <MX_GPIO_Init+0x1b0>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	4a5f      	ldr	r2, [pc, #380]	; (8000500 <MX_GPIO_Init+0x1b0>)
 8000384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800038a:	4b5d      	ldr	r3, [pc, #372]	; (8000500 <MX_GPIO_Init+0x1b0>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000392:	617b      	str	r3, [r7, #20]
 8000394:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	4b5a      	ldr	r3, [pc, #360]	; (8000500 <MX_GPIO_Init+0x1b0>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	4a59      	ldr	r2, [pc, #356]	; (8000500 <MX_GPIO_Init+0x1b0>)
 800039c:	f043 0302 	orr.w	r3, r3, #2
 80003a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a2:	4b57      	ldr	r3, [pc, #348]	; (8000500 <MX_GPIO_Init+0x1b0>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a6:	f003 0302 	and.w	r3, r3, #2
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ae:	4b54      	ldr	r3, [pc, #336]	; (8000500 <MX_GPIO_Init+0x1b0>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	4a53      	ldr	r2, [pc, #332]	; (8000500 <MX_GPIO_Init+0x1b0>)
 80003b4:	f043 0308 	orr.w	r3, r3, #8
 80003b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ba:	4b51      	ldr	r3, [pc, #324]	; (8000500 <MX_GPIO_Init+0x1b0>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	f003 0308 	and.w	r3, r3, #8
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80003c6:	4b4e      	ldr	r3, [pc, #312]	; (8000500 <MX_GPIO_Init+0x1b0>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	4a4d      	ldr	r2, [pc, #308]	; (8000500 <MX_GPIO_Init+0x1b0>)
 80003cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d2:	4b4b      	ldr	r3, [pc, #300]	; (8000500 <MX_GPIO_Init+0x1b0>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80003de:	f003 f8d1 	bl	8003584 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e2:	4b47      	ldr	r3, [pc, #284]	; (8000500 <MX_GPIO_Init+0x1b0>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	4a46      	ldr	r2, [pc, #280]	; (8000500 <MX_GPIO_Init+0x1b0>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ee:	4b44      	ldr	r3, [pc, #272]	; (8000500 <MX_GPIO_Init+0x1b0>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000400:	4840      	ldr	r0, [pc, #256]	; (8000504 <MX_GPIO_Init+0x1b4>)
 8000402:	f001 fef5 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	483f      	ldr	r0, [pc, #252]	; (8000508 <MX_GPIO_Init+0x1b8>)
 800040c:	f001 fef0 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	483d      	ldr	r0, [pc, #244]	; (800050c <MX_GPIO_Init+0x1bc>)
 8000416:	f001 feeb 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800041a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000420:	4b3b      	ldr	r3, [pc, #236]	; (8000510 <MX_GPIO_Init+0x1c0>)
 8000422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000428:	f107 031c 	add.w	r3, r7, #28
 800042c:	4619      	mov	r1, r3
 800042e:	4837      	ldr	r0, [pc, #220]	; (800050c <MX_GPIO_Init+0x1bc>)
 8000430:	f001 fd4c 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000434:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2301      	movs	r3, #1
 800043c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2300      	movs	r3, #0
 8000444:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	4619      	mov	r1, r3
 800044c:	482d      	ldr	r0, [pc, #180]	; (8000504 <MX_GPIO_Init+0x1b4>)
 800044e:	f001 fd3d 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000452:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000458:	2302      	movs	r3, #2
 800045a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000460:	2303      	movs	r3, #3
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000464:	2307      	movs	r3, #7
 8000466:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000468:	f107 031c 	add.w	r3, r7, #28
 800046c:	4619      	mov	r1, r3
 800046e:	4829      	ldr	r0, [pc, #164]	; (8000514 <MX_GPIO_Init+0x1c4>)
 8000470:	f001 fd2c 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000474:	2320      	movs	r3, #32
 8000476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000478:	2300      	movs	r3, #0
 800047a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000480:	f107 031c 	add.w	r3, r7, #28
 8000484:	4619      	mov	r1, r3
 8000486:	4820      	ldr	r0, [pc, #128]	; (8000508 <MX_GPIO_Init+0x1b8>)
 8000488:	f001 fd20 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800048c:	2340      	movs	r3, #64	; 0x40
 800048e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000490:	2301      	movs	r3, #1
 8000492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	2300      	movs	r3, #0
 800049a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800049c:	f107 031c 	add.w	r3, r7, #28
 80004a0:	4619      	mov	r1, r3
 80004a2:	4819      	ldr	r0, [pc, #100]	; (8000508 <MX_GPIO_Init+0x1b8>)
 80004a4:	f001 fd12 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80004a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80004ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ae:	2302      	movs	r3, #2
 80004b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004b6:	2303      	movs	r3, #3
 80004b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80004ba:	2308      	movs	r3, #8
 80004bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	4619      	mov	r1, r3
 80004c4:	4810      	ldr	r0, [pc, #64]	; (8000508 <MX_GPIO_Init+0x1b8>)
 80004c6:	f001 fd01 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2300      	movs	r3, #0
 80004d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	4619      	mov	r1, r3
 80004e0:	480a      	ldr	r0, [pc, #40]	; (800050c <MX_GPIO_Init+0x1bc>)
 80004e2:	f001 fcf3 	bl	8001ecc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	2028      	movs	r0, #40	; 0x28
 80004ec:	f001 fca9 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004f0:	2028      	movs	r0, #40	; 0x28
 80004f2:	f001 fcc2 	bl	8001e7a <HAL_NVIC_EnableIRQ>

}
 80004f6:	bf00      	nop
 80004f8:	3730      	adds	r7, #48	; 0x30
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000
 8000504:	48000400 	.word	0x48000400
 8000508:	48001800 	.word	0x48001800
 800050c:	48000800 	.word	0x48000800
 8000510:	10210000 	.word	0x10210000
 8000514:	48000c00 	.word	0x48000c00

08000518 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db0c      	blt.n	8000544 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 021f 	and.w	r2, r3, #31
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <__NVIC_ClearPendingIRQ+0x38>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	2001      	movs	r0, #1
 800053a:	fa00 f202 	lsl.w	r2, r0, r2
 800053e:	3360      	adds	r3, #96	; 0x60
 8000540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100

08000554 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Прерывание на сообщение по CAN шине
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    if(HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800055c:	4b31      	ldr	r3, [pc, #196]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800055e:	4a32      	ldr	r2, [pc, #200]	; (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000560:	2100      	movs	r1, #0
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f001 f807 	bl	8001576 <HAL_CAN_GetRxMessage>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d156      	bne.n	800061c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
    	HAL_TIM_Base_Stop_IT(&htim8);
 800056e:	482f      	ldr	r0, [pc, #188]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000570:	f004 fca4 	bl	8004ebc <HAL_TIM_Base_Stop_IT>
    	//Если связь была потеряна, отключение светодиодов
    	if (ConnectionErr) {
 8000574:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d018      	beq.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	482c      	ldr	r0, [pc, #176]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000582:	f001 fe35 	bl	80021f0 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	482b      	ldr	r0, [pc, #172]	; (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800058c:	f001 fe30 	bl	80021f0 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000596:	4828      	ldr	r0, [pc, #160]	; (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000598:	f001 fe2a 	bl	80021f0 <HAL_GPIO_WritePin>
    	    CDC_Transmit_FS(ConResMsg, strlen((char *)ConResMsg));
 800059c:	4827      	ldr	r0, [pc, #156]	; (800063c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 800059e:	f7ff fe2d 	bl	80001fc <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4619      	mov	r1, r3
 80005a8:	4824      	ldr	r0, [pc, #144]	; (800063c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 80005aa:	f008 f809 	bl	80085c0 <CDC_Transmit_FS>
    	}
    	ConnectionErr = 0;
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
    	if (RxHeader.StdId == ID_DATA) {
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d118      	bne.n	80005ee <HAL_CAN_RxFifo0MsgPendingCallback+0x9a>
        	if (RxData[0]) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d004      	beq.n	80005ce <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
 80005c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c8:	481b      	ldr	r0, [pc, #108]	; (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80005ca:	f001 fe29 	bl	8002220 <HAL_GPIO_TogglePin>
        	if (RxData[1]) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d003      	beq.n	80005de <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	4817      	ldr	r0, [pc, #92]	; (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80005da:	f001 fe21 	bl	8002220 <HAL_GPIO_TogglePin>
        	if (RxData[2]) HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80005e0:	789b      	ldrb	r3, [r3, #2]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d003      	beq.n	80005ee <HAL_CAN_RxFifo0MsgPendingCallback+0x9a>
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	4812      	ldr	r0, [pc, #72]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80005ea:	f001 fe19 	bl	8002220 <HAL_GPIO_TogglePin>
    	}
    	if (RxHeader.StdId == ID_SET_LED) {
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d10b      	bne.n	800060e <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
			TxData[0] = RxData[0];
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 80005fc:	701a      	strb	r2, [r3, #0]
			TxData[1] = RxData[1];
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000600:	785a      	ldrb	r2, [r3, #1]
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000604:	705a      	strb	r2, [r3, #1]
			TxData[2] = RxData[2];
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000608:	789a      	ldrb	r2, [r3, #2]
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 800060c:	709a      	strb	r2, [r3, #2]
    	}
    	//Сброс счётчика таймера отсутствия соединения и его запуск
    	__HAL_TIM_SetCounter(&htim8,0);
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
    	HAL_TIM_Base_Start_IT(&htim8);
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000618:	f004 fbe0 	bl	8004ddc <HAL_TIM_Base_Start_IT>
    }
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	2000021c 	.word	0x2000021c
 8000628:	200004bc 	.word	0x200004bc
 800062c:	200004d8 	.word	0x200004d8
 8000630:	20000224 	.word	0x20000224
 8000634:	48000800 	.word	0x48000800
 8000638:	48000400 	.word	0x48000400
 800063c:	20000038 	.word	0x20000038
 8000640:	20000214 	.word	0x20000214

08000644 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) {
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000654:	d144      	bne.n	80006e0 <HAL_GPIO_EXTI_Callback+0x9c>
		//Отключение прерывания для устранения дребезга
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000656:	2028      	movs	r0, #40	; 0x28
 8000658:	f001 fc1d 	bl	8001e96 <HAL_NVIC_DisableIRQ>
		//Есть ли данные от USB. Да = перезапись пинов для зажигания
		//Посылать так "echo -ne "\x1\x1\x1\x1\x1" > /dev/ttyACM1"
		//\x LD3 \x LD2 \x LD1 \x Отправить данные из USB на другую плату по CAN \x Записать данные из USB локально
		USB_Rx = USB_Rx_Msg();
 800065c:	f007 ffe8 	bl	8008630 <USB_Rx_Msg>
 8000660:	4603      	mov	r3, r0
 8000662:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000664:	6013      	str	r3, [r2, #0]
		if (USB_Rx) {
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d02f      	beq.n	80006ce <HAL_GPIO_EXTI_Callback+0x8a>
			if (USB_Rx[3]) {
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	3303      	adds	r3, #3
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d014      	beq.n	80006a4 <HAL_GPIO_EXTI_Callback+0x60>
				TxDataSet[0] = USB_Rx[0];
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <HAL_GPIO_EXTI_Callback+0xa8>)
 8000682:	701a      	strb	r2, [r3, #0]
				TxDataSet[1] = USB_Rx[1];
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	785a      	ldrb	r2, [r3, #1]
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_GPIO_EXTI_Callback+0xa8>)
 800068c:	705a      	strb	r2, [r3, #1]
				TxDataSet[2] = USB_Rx[2];
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	789a      	ldrb	r2, [r3, #2]
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_GPIO_EXTI_Callback+0xa8>)
 8000696:	709a      	strb	r2, [r3, #2]
				HAL_CAN_AddTxMessage(&hcan1, &TxHeader_SetLED, TxDataSet, &TxMailBox);
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_GPIO_EXTI_Callback+0xac>)
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <HAL_GPIO_EXTI_Callback+0xa8>)
 800069c:	4915      	ldr	r1, [pc, #84]	; (80006f4 <HAL_GPIO_EXTI_Callback+0xb0>)
 800069e:	4816      	ldr	r0, [pc, #88]	; (80006f8 <HAL_GPIO_EXTI_Callback+0xb4>)
 80006a0:	f000 fe35 	bl	800130e <HAL_CAN_AddTxMessage>
			}
			if (USB_Rx[4]) {
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3304      	adds	r3, #4
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00e      	beq.n	80006ce <HAL_GPIO_EXTI_Callback+0x8a>
				TxData[0] = USB_Rx[0];
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_GPIO_EXTI_Callback+0xb8>)
 80006b8:	701a      	strb	r2, [r3, #0]
				TxData[1] = USB_Rx[1];
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	785a      	ldrb	r2, [r3, #1]
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_GPIO_EXTI_Callback+0xb8>)
 80006c2:	705a      	strb	r2, [r3, #1]
				TxData[2] = USB_Rx[2];
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	789a      	ldrb	r2, [r3, #2]
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <HAL_GPIO_EXTI_Callback+0xb8>)
 80006cc:	709a      	strb	r2, [r3, #2]
			}
		}
		//Отправка сообщения
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox);
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_GPIO_EXTI_Callback+0xac>)
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <HAL_GPIO_EXTI_Callback+0xb8>)
 80006d2:	490b      	ldr	r1, [pc, #44]	; (8000700 <HAL_GPIO_EXTI_Callback+0xbc>)
 80006d4:	4808      	ldr	r0, [pc, #32]	; (80006f8 <HAL_GPIO_EXTI_Callback+0xb4>)
 80006d6:	f000 fe1a 	bl	800130e <HAL_CAN_AddTxMessage>
		//Включение прерывания через 500 мс
		HAL_TIM_Base_Start_IT(&htim1);
 80006da:	480a      	ldr	r0, [pc, #40]	; (8000704 <HAL_GPIO_EXTI_Callback+0xc0>)
 80006dc:	f004 fb7e 	bl	8004ddc <HAL_TIM_Base_Start_IT>
	}
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000470 	.word	0x20000470
 80006ec:	20000218 	.word	0x20000218
 80006f0:	20000220 	.word	0x20000220
 80006f4:	20000474 	.word	0x20000474
 80006f8:	20000448 	.word	0x20000448
 80006fc:	20000214 	.word	0x20000214
 8000700:	2000048c 	.word	0x2000048c
 8000704:	20000524 	.word	0x20000524

08000708 <HAL_TIM_PeriodElapsedCallback>:
//Прерывания на таймеры
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM1) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a32      	ldr	r2, [pc, #200]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d130      	bne.n	800077c <HAL_TIM_PeriodElapsedCallback+0x74>
        	HAL_TIM_Base_Stop_IT(&htim1);
 800071a:	4832      	ldr	r0, [pc, #200]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800071c:	f004 fbce 	bl	8004ebc <HAL_TIM_Base_Stop_IT>
        	__HAL_TIM_SetCounter(&htim1,0);
 8000720:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
        	if (ConnectionErr) {
 8000728:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d01b      	beq.n	8000768 <HAL_TIM_PeriodElapsedCallback+0x60>
        		//Поскольку таймер настроен на 250мс, для мигания каждые 500мс надо пропускать одно переполнение
        		if (BlinkSkip) BlinkSkip = 0;
 8000730:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <HAL_TIM_PeriodElapsedCallback+0x38>
 8000738:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	e00f      	b.n	8000760 <HAL_TIM_PeriodElapsedCallback+0x58>
        		else {
        			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	482b      	ldr	r0, [pc, #172]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000744:	f001 fd6c 	bl	8002220 <HAL_GPIO_TogglePin>
        			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	482a      	ldr	r0, [pc, #168]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800074c:	f001 fd68 	bl	8002220 <HAL_GPIO_TogglePin>
        			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000754:	4827      	ldr	r0, [pc, #156]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000756:	f001 fd63 	bl	8002220 <HAL_GPIO_TogglePin>
        			BlinkSkip = 1;
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
        		}
        		HAL_TIM_Base_Start_IT(&htim1);
 8000760:	4820      	ldr	r0, [pc, #128]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000762:	f004 fb3b 	bl	8004ddc <HAL_TIM_Base_Start_IT>
 8000766:	e009      	b.n	800077c <HAL_TIM_PeriodElapsedCallback+0x74>
        	}
        	else {
        		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);  // очищаем бит EXTI_PR (бит прерывания)
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800076a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800076e:	615a      	str	r2, [r3, #20]
        		NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx (бит очереди)
 8000770:	2028      	movs	r0, #40	; 0x28
 8000772:	f7ff fed1 	bl	8000518 <__NVIC_ClearPendingIRQ>
        		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 8000776:	2028      	movs	r0, #40	; 0x28
 8000778:	f001 fb7f 	bl	8001e7a <HAL_NVIC_EnableIRQ>
        	}
        }
        if(htim->Instance == TIM8) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d128      	bne.n	80007d8 <HAL_TIM_PeriodElapsedCallback+0xd0>
        	HAL_TIM_Base_Stop_IT(&htim8);
 8000786:	481e      	ldr	r0, [pc, #120]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000788:	f004 fb98 	bl	8004ebc <HAL_TIM_Base_Stop_IT>
        	__HAL_TIM_SetCounter(&htim8,0);
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
        	ConnectionErr = 1;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
            BlinkSkip = 1;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	4812      	ldr	r0, [pc, #72]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80007a6:	f001 fd23 	bl	80021f0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80007b0:	f001 fd1e 	bl	80021f0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80007bc:	f001 fd18 	bl	80021f0 <HAL_GPIO_WritePin>
        	CDC_Transmit_FS(ConErrMsg, strlen((char *)ConErrMsg));
 80007c0:	4810      	ldr	r0, [pc, #64]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80007c2:	f7ff fd1b 	bl	80001fc <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	4619      	mov	r1, r3
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80007ce:	f007 fef7 	bl	80085c0 <CDC_Transmit_FS>
        	//Поскольку TIM1 настроен на 250мс, можно использовать его для мигания светодиодами
        	HAL_TIM_Base_Start_IT(&htim1);
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80007d4:	f004 fb02 	bl	8004ddc <HAL_TIM_Base_Start_IT>
        }
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40012c00 	.word	0x40012c00
 80007e4:	20000524 	.word	0x20000524
 80007e8:	20000224 	.word	0x20000224
 80007ec:	20000225 	.word	0x20000225
 80007f0:	48000800 	.word	0x48000800
 80007f4:	48000400 	.word	0x48000400
 80007f8:	40010400 	.word	0x40010400
 80007fc:	40013400 	.word	0x40013400
 8000800:	200004d8 	.word	0x200004d8
 8000804:	20000000 	.word	0x20000000

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fadd 	bl	8000dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f896 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff fd9c 	bl	8000350 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000818:	f7ff fcf8 	bl	800020c <MX_CAN1_Init>
  MX_TIM1_Init();
 800081c:	f000 f9c2 	bl	8000ba4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000820:	f000 fa14 	bl	8000c4c <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8000824:	f007 fe04 	bl	8008430 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //Пакет с данными
  TxHeader.StdId = ID_DATA;
 8000828:	4b3d      	ldr	r3, [pc, #244]	; (8000920 <main+0x118>)
 800082a:	2202      	movs	r2, #2
 800082c:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 3;
 800082e:	4b3c      	ldr	r3, [pc, #240]	; (8000920 <main+0x118>)
 8000830:	2203      	movs	r2, #3
 8000832:	611a      	str	r2, [r3, #16]
  //Красный светодиод
  TxData[0] = 0;
 8000834:	4b3b      	ldr	r3, [pc, #236]	; (8000924 <main+0x11c>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
  //Синий светодиод
  TxData[1] = 1;
 800083a:	4b3a      	ldr	r3, [pc, #232]	; (8000924 <main+0x11c>)
 800083c:	2201      	movs	r2, #1
 800083e:	705a      	strb	r2, [r3, #1]
  //Зелёный светодиод
  TxData[2] = 0;
 8000840:	4b38      	ldr	r3, [pc, #224]	; (8000924 <main+0x11c>)
 8000842:	2200      	movs	r2, #0
 8000844:	709a      	strb	r2, [r3, #2]
  //Пакет проверки соединения
  TxHeader_Connectivity.StdId = ID_CONNECT;
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <main+0x120>)
 8000848:	2203      	movs	r2, #3
 800084a:	601a      	str	r2, [r3, #0]
  TxHeader_Connectivity.DLC = 0;
 800084c:	4b36      	ldr	r3, [pc, #216]	; (8000928 <main+0x120>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  //Пакет установки светодиода
  TxHeader_SetLED.StdId = ID_SET_LED;
 8000852:	4b36      	ldr	r3, [pc, #216]	; (800092c <main+0x124>)
 8000854:	2201      	movs	r2, #1
 8000856:	601a      	str	r2, [r3, #0]
  TxHeader_SetLED.DLC = 3;
 8000858:	4b34      	ldr	r3, [pc, #208]	; (800092c <main+0x124>)
 800085a:	2203      	movs	r2, #3
 800085c:	611a      	str	r2, [r3, #16]
  //Одинаковые параметры пакетов
  TxHeader.ExtId = TxHeader_Connectivity.ExtId = TxHeader_SetLED.ExtId = 0;
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <main+0x124>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	4b31      	ldr	r3, [pc, #196]	; (800092c <main+0x124>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	4a2f      	ldr	r2, [pc, #188]	; (8000928 <main+0x120>)
 800086a:	6053      	str	r3, [r2, #4]
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <main+0x120>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a2b      	ldr	r2, [pc, #172]	; (8000920 <main+0x118>)
 8000872:	6053      	str	r3, [r2, #4]
  TxHeader.RTR = TxHeader_Connectivity.RTR = TxHeader_SetLED.RTR = 0;
 8000874:	4b2d      	ldr	r3, [pc, #180]	; (800092c <main+0x124>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <main+0x124>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	4a2a      	ldr	r2, [pc, #168]	; (8000928 <main+0x120>)
 8000880:	60d3      	str	r3, [r2, #12]
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <main+0x120>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	4a26      	ldr	r2, [pc, #152]	; (8000920 <main+0x118>)
 8000888:	60d3      	str	r3, [r2, #12]
  TxHeader.IDE = TxHeader_Connectivity.IDE = TxHeader_SetLED.IDE = 0;
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <main+0x124>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	4b26      	ldr	r3, [pc, #152]	; (800092c <main+0x124>)
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	4a24      	ldr	r2, [pc, #144]	; (8000928 <main+0x120>)
 8000896:	6093      	str	r3, [r2, #8]
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <main+0x120>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	4a20      	ldr	r2, [pc, #128]	; (8000920 <main+0x118>)
 800089e:	6093      	str	r3, [r2, #8]
  TxHeader.TransmitGlobalTime = TxHeader_Connectivity.TransmitGlobalTime = TxHeader_SetLED.TransmitGlobalTime = 0;
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <main+0x124>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	751a      	strb	r2, [r3, #20]
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <main+0x124>)
 80008a8:	7d1a      	ldrb	r2, [r3, #20]
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <main+0x120>)
 80008ac:	751a      	strb	r2, [r3, #20]
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <main+0x120>)
 80008b0:	7d1a      	ldrb	r2, [r3, #20]
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <main+0x118>)
 80008b4:	751a      	strb	r2, [r3, #20]
  HAL_CAN_Start(&hcan1);
 80008b6:	481e      	ldr	r0, [pc, #120]	; (8000930 <main+0x128>)
 80008b8:	f000 fce5 	bl	8001286 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80008bc:	2102      	movs	r1, #2
 80008be:	481c      	ldr	r0, [pc, #112]	; (8000930 <main+0x128>)
 80008c0:	f000 ff6b 	bl	800179a <HAL_CAN_ActivateNotification>
  //Если не сбросить флаг, первое прерывание произойдёт непредсказуемо
  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <main+0x12c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f06f 0201 	mvn.w	r2, #1
 80008cc:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_SR_UIF);
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <main+0x130>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f06f 0201 	mvn.w	r2, #1
 80008d6:	611a      	str	r2, [r3, #16]
  //Таймер на 3 секунды для проверки соединения
  HAL_TIM_Base_Start_IT(&htim8);
 80008d8:	4817      	ldr	r0, [pc, #92]	; (8000938 <main+0x130>)
 80008da:	f004 fa7f 	bl	8004ddc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 80008de:	bf00      	nop
 80008e0:	4813      	ldr	r0, [pc, #76]	; (8000930 <main+0x128>)
 80008e2:	f000 fdef 	bl	80014c4 <HAL_CAN_GetTxMailboxesFreeLevel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0f9      	beq.n	80008e0 <main+0xd8>
	if (HAL_OK != HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Connectivity, 0, &TxMailBox))
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <main+0x134>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	490d      	ldr	r1, [pc, #52]	; (8000928 <main+0x120>)
 80008f2:	480f      	ldr	r0, [pc, #60]	; (8000930 <main+0x128>)
 80008f4:	f000 fd0b 	bl	800130e <HAL_CAN_AddTxMessage>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <main+0xfa>
		Error_Handler();
 80008fe:	f000 f89b 	bl	8000a38 <Error_Handler>
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailBox));
 8000902:	bf00      	nop
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <main+0x134>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <main+0x128>)
 800090c:	f000 fe0f 	bl	800152e <HAL_CAN_IsTxMessagePending>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1f6      	bne.n	8000904 <main+0xfc>
  	HAL_Delay(1000);
 8000916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091a:	f000 facb 	bl	8000eb4 <HAL_Delay>
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 800091e:	e7de      	b.n	80008de <main+0xd6>
 8000920:	2000048c 	.word	0x2000048c
 8000924:	20000214 	.word	0x20000214
 8000928:	200004a4 	.word	0x200004a4
 800092c:	20000474 	.word	0x20000474
 8000930:	20000448 	.word	0x20000448
 8000934:	20000524 	.word	0x20000524
 8000938:	200004d8 	.word	0x200004d8
 800093c:	20000220 	.word	0x20000220

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0bc      	sub	sp, #240	; 0xf0
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800094a:	2244      	movs	r2, #68	; 0x44
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f008 fb8e 	bl	8009070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2294      	movs	r2, #148	; 0x94
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f008 fb80 	bl	8009070 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000970:	2000      	movs	r0, #0
 8000972:	f002 fd53 	bl	800341c <HAL_PWREx_ControlVoltageScaling>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800097c:	f000 f85c 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000980:	2330      	movs	r3, #48	; 0x30
 8000982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000986:	2301      	movs	r3, #1
 8000988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000998:	2360      	movs	r3, #96	; 0x60
 800099a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009b0:	233c      	movs	r3, #60	; 0x3c
 80009b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fde9 	bl	80035a4 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009d8:	f000 f82e 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	230f      	movs	r3, #15
 80009de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2303      	movs	r3, #3
 80009e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ee:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80009f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a02:	2105      	movs	r1, #5
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 f9f3 	bl	8003df0 <HAL_RCC_ClockConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a10:	f000 f812 	bl	8000a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4618      	mov	r0, r3
 8000a22:	f003 fc6b 	bl	80042fc <HAL_RCCEx_PeriphCLKConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000a2c:	f000 f804 	bl	8000a38 <Error_Handler>
  }
}
 8000a30:	bf00      	nop
 8000a32:	37f0      	adds	r7, #240	; 0xf0
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_MspInit+0x44>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6613      	str	r3, [r2, #96]	; 0x60
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x44>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f9cc 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <CAN1_RX0_IRQHandler+0x10>)
 8000ae6:	f000 fe7e 	bl	80017e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000448 	.word	0x20000448

08000af4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000afa:	f004 fa0e 	bl	8004f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000524 	.word	0x20000524

08000b08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b10:	f001 fba0 	bl	8002254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <TIM8_UP_IRQHandler+0x10>)
 8000b1e:	f004 f9fc 	bl	8004f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200004d8 	.word	0x200004d8

08000b2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <OTG_FS_IRQHandler+0x10>)
 8000b32:	f001 fcfa 	bl	800252a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20001a48 	.word	0x20001a48

08000b40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <SystemInit+0x5c>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <SystemInit+0x5c>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <SystemInit+0x60>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <SystemInit+0x60>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x60>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <SystemInit+0x60>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <SystemInit+0x60>)
 8000b6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <SystemInit+0x60>)
 8000b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <SystemInit+0x60>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <SystemInit+0x60>)
 8000b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SystemInit+0x60>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <MX_TIM1_Init+0xa0>)
 8000bc4:	4a20      	ldr	r2, [pc, #128]	; (8000c48 <MX_TIM1_Init+0xa4>)
 8000bc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1199;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_TIM1_Init+0xa0>)
 8000bca:	f240 42af 	movw	r2, #1199	; 0x4af
 8000bce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_TIM1_Init+0xa0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24999;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_TIM1_Init+0xa0>)
 8000bd8:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000bdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_TIM1_Init+0xa0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_TIM1_Init+0xa0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_TIM1_Init+0xa0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf0:	4814      	ldr	r0, [pc, #80]	; (8000c44 <MX_TIM1_Init+0xa0>)
 8000bf2:	f004 f89b 	bl	8004d2c <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000bfc:	f7ff ff1c 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_TIM1_Init+0xa0>)
 8000c0e:	f004 faa3 	bl	8005158 <HAL_TIM_ConfigClockSource>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000c18:	f7ff ff0e 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_TIM1_Init+0xa0>)
 8000c2e:	f004 fcb5 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c38:	f7ff fefe 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000524 	.word	0x20000524
 8000c48:	40012c00 	.word	0x40012c00

08000c4c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <MX_TIM8_Init+0xa0>)
 8000c6c:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <MX_TIM8_Init+0xa4>)
 8000c6e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9599;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_TIM8_Init+0xa0>)
 8000c72:	f242 527f 	movw	r2, #9599	; 0x257f
 8000c76:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM8_Init+0xa0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 37499;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM8_Init+0xa0>)
 8000c80:	f249 227b 	movw	r2, #37499	; 0x927b
 8000c84:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM8_Init+0xa0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_TIM8_Init+0xa0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_TIM8_Init+0xa0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c98:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_TIM8_Init+0xa0>)
 8000c9a:	f004 f847 	bl	8004d2c <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8000ca4:	f7ff fec8 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_TIM8_Init+0xa0>)
 8000cb6:	f004 fa4f 	bl	8005158 <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000cc0:	f7ff feba 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM8_Init+0xa0>)
 8000cd6:	f004 fc61 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000ce0:	f7ff feaa 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200004d8 	.word	0x200004d8
 8000cf0:	40013400 	.word	0x40013400

08000cf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <HAL_TIM_Base_MspInit+0x78>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d114      	bne.n	8000d30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2019      	movs	r0, #25
 8000d24:	f001 f88d 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d28:	2019      	movs	r0, #25
 8000d2a:	f001 f8a6 	bl	8001e7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000d2e:	e018      	b.n	8000d62 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM8)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <HAL_TIM_Base_MspInit+0x80>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d113      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d44:	6613      	str	r3, [r2, #96]	; 0x60
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	202c      	movs	r0, #44	; 0x2c
 8000d58:	f001 f873 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000d5c:	202c      	movs	r0, #44	; 0x2c
 8000d5e:	f001 f88c 	bl	8001e7a <HAL_NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40012c00 	.word	0x40012c00
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40013400 	.word	0x40013400

08000d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff fee0 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d82:	e003      	b.n	8000d8c <LoopCopyDataInit>

08000d84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d8a:	3104      	adds	r1, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d94:	d3f6      	bcc.n	8000d84 <CopyDataInit>
	ldr	r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d98:	e002      	b.n	8000da0 <LoopFillZerobss>

08000d9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d9c:	f842 3b04 	str.w	r3, [r2], #4

08000da0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <LoopForever+0x16>)
	cmp	r2, r3
 8000da2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000da4:	d3f9      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f008 f93f 	bl	8009028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000daa:	f7ff fd2d 	bl	8000808 <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000db4:	08009128 	.word	0x08009128
	ldr	r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dbc:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8000dc0:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8000dc4:	20001e50 	.word	0x20001e50

08000dc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_IRQHandler>

08000dca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f001 f829 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f80e 	bl	8000dfc <HAL_InitTick>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	e001      	b.n	8000df0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dec:	f7ff fe2a 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_InitTick+0x6c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d023      	beq.n	8000e58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_InitTick+0x70>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_InitTick+0x6c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 f843 	bl	8001eb2 <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10f      	bne.n	8000e52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d809      	bhi.n	8000e4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f000 ffff 	bl	8001e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_InitTick+0x74>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e007      	b.n	8000e5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e004      	b.n	8000e5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	e001      	b.n	8000e5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000080 	.word	0x20000080
 8000e6c:	20000078 	.word	0x20000078
 8000e70:	2000007c 	.word	0x2000007c

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000080 	.word	0x20000080
 8000e98:	20000570 	.word	0x20000570

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000570 	.word	0x20000570

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff ffee 	bl	8000e9c <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_Delay+0x44>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffde 	bl	8000e9c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000080 	.word	0x20000080

08000efc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e0ed      	b.n	80010ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff f9cc 	bl	80002b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0202 	bic.w	r2, r2, #2
 8000f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f30:	f7ff ffb4 	bl	8000e9c <HAL_GetTick>
 8000f34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f36:	e012      	b.n	8000f5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f38:	f7ff ffb0 	bl	8000e9c <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b0a      	cmp	r3, #10
 8000f44:	d90b      	bls.n	8000f5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2205      	movs	r2, #5
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e0c5      	b.n	80010ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e5      	bne.n	8000f38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0201 	orr.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f7c:	f7ff ff8e 	bl	8000e9c <HAL_GetTick>
 8000f80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f82:	e012      	b.n	8000faa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f84:	f7ff ff8a 	bl	8000e9c <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b0a      	cmp	r3, #10
 8000f90:	d90b      	bls.n	8000faa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2205      	movs	r2, #5
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e09f      	b.n	80010ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0e5      	beq.n	8000f84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7e1b      	ldrb	r3, [r3, #24]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d108      	bne.n	8000fd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e007      	b.n	8000fe2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7e5b      	ldrb	r3, [r3, #25]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d108      	bne.n	8000ffc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e007      	b.n	800100c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800100a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7e9b      	ldrb	r3, [r3, #26]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d108      	bne.n	8001026 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0220 	orr.w	r2, r2, #32
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e007      	b.n	8001036 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0220 	bic.w	r2, r2, #32
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7edb      	ldrb	r3, [r3, #27]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 0210 	bic.w	r2, r2, #16
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e007      	b.n	8001060 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0210 	orr.w	r2, r2, #16
 800105e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7f1b      	ldrb	r3, [r3, #28]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0208 	orr.w	r2, r2, #8
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e007      	b.n	800108a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0208 	bic.w	r2, r2, #8
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7f5b      	ldrb	r3, [r3, #29]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0204 	orr.w	r2, r2, #4
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e007      	b.n	80010b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0204 	bic.w	r2, r2, #4
 80010b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	ea42 0103 	orr.w	r1, r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	1e5a      	subs	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b087      	sub	sp, #28
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001108:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800110a:	7cfb      	ldrb	r3, [r7, #19]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d003      	beq.n	8001118 <HAL_CAN_ConfigFilter+0x26>
 8001110:	7cfb      	ldrb	r3, [r7, #19]
 8001112:	2b02      	cmp	r3, #2
 8001114:	f040 80aa 	bne.w	800126c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	2201      	movs	r2, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d123      	bne.n	800119a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43db      	mvns	r3, r3
 800115c:	401a      	ands	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001174:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3248      	adds	r2, #72	; 0x48
 800117a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800118e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001190:	6979      	ldr	r1, [r7, #20]
 8001192:	3348      	adds	r3, #72	; 0x48
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	440b      	add	r3, r1
 8001198:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d122      	bne.n	80011e8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3248      	adds	r2, #72	; 0x48
 80011c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011de:	6979      	ldr	r1, [r7, #20]
 80011e0:	3348      	adds	r3, #72	; 0x48
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	440b      	add	r3, r1
 80011e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d109      	bne.n	8001204 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001202:	e007      	b.n	8001214 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d109      	bne.n	8001230 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43db      	mvns	r3, r3
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800122e:	e007      	b.n	8001240 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	431a      	orrs	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d107      	bne.n	8001258 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	431a      	orrs	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800125e:	f023 0201 	bic.w	r2, r3, #1
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	e006      	b.n	800127a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
  }
}
 800127a:	4618      	mov	r0, r3
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d12e      	bne.n	80012f8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2202      	movs	r2, #2
 800129e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0201 	bic.w	r2, r2, #1
 80012b0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012b2:	f7ff fdf3 	bl	8000e9c <HAL_GetTick>
 80012b6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012b8:	e012      	b.n	80012e0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ba:	f7ff fdef 	bl	8000e9c <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b0a      	cmp	r3, #10
 80012c6:	d90b      	bls.n	80012e0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2205      	movs	r2, #5
 80012d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e012      	b.n	8001306 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1e5      	bne.n	80012ba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e006      	b.n	8001306 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
  }
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800130e:	b480      	push	{r7}
 8001310:	b089      	sub	sp, #36	; 0x24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001322:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d003      	beq.n	800133a <HAL_CAN_AddTxMessage+0x2c>
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	2b02      	cmp	r3, #2
 8001336:	f040 80b8 	bne.w	80014aa <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10a      	bne.n	800135a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d105      	bne.n	800135a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80a0 	beq.w	800149a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	0e1b      	lsrs	r3, r3, #24
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d907      	bls.n	800137a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e09e      	b.n	80014b8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800137a:	2201      	movs	r2, #1
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10d      	bne.n	80013a8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001396:	68f9      	ldr	r1, [r7, #12]
 8001398:	6809      	ldr	r1, [r1, #0]
 800139a:	431a      	orrs	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3318      	adds	r3, #24
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	440b      	add	r3, r1
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	e00f      	b.n	80013c8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013b8:	68f9      	ldr	r1, [r7, #12]
 80013ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3318      	adds	r3, #24
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	440b      	add	r3, r1
 80013c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3318      	adds	r3, #24
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	440b      	add	r3, r1
 80013d8:	3304      	adds	r3, #4
 80013da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	7d1b      	ldrb	r3, [r3, #20]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d111      	bne.n	8001408 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3318      	adds	r3, #24
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	4413      	add	r3, r2
 80013f0:	3304      	adds	r3, #4
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	6811      	ldr	r1, [r2, #0]
 80013f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3318      	adds	r3, #24
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	440b      	add	r3, r1
 8001404:	3304      	adds	r3, #4
 8001406:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3307      	adds	r3, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	061a      	lsls	r2, r3, #24
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3306      	adds	r3, #6
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3305      	adds	r3, #5
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	4313      	orrs	r3, r2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	3204      	adds	r2, #4
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	4610      	mov	r0, r2
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	6811      	ldr	r1, [r2, #0]
 8001430:	ea43 0200 	orr.w	r2, r3, r0
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	440b      	add	r3, r1
 800143a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800143e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3303      	adds	r3, #3
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	061a      	lsls	r2, r3, #24
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3302      	adds	r3, #2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	041b      	lsls	r3, r3, #16
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3301      	adds	r3, #1
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	4313      	orrs	r3, r2
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	4610      	mov	r0, r2
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	6811      	ldr	r1, [r2, #0]
 8001466:	ea43 0200 	orr.w	r2, r3, r0
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	440b      	add	r3, r1
 8001470:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001474:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3318      	adds	r3, #24
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	4413      	add	r3, r2
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	6811      	ldr	r1, [r2, #0]
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3318      	adds	r3, #24
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	440b      	add	r3, r1
 8001494:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e00e      	b.n	80014b8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e006      	b.n	80014b8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
  }
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3724      	adds	r7, #36	; 0x24
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80014d8:	7afb      	ldrb	r3, [r7, #11]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d002      	beq.n	80014e4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80014de:	7afb      	ldrb	r3, [r7, #11]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d11d      	bne.n	8001520 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3301      	adds	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3301      	adds	r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3301      	adds	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001520:	68fb      	ldr	r3, [r7, #12]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001542:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d002      	beq.n	8001550 <HAL_CAN_IsTxMessagePending+0x22>
 800154a:	7afb      	ldrb	r3, [r7, #11]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d10b      	bne.n	8001568 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	069b      	lsls	r3, r3, #26
 800155a:	401a      	ands	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	069b      	lsls	r3, r3, #26
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001564:	2301      	movs	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001568:	68fb      	ldr	r3, [r7, #12]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001576:	b480      	push	{r7}
 8001578:	b087      	sub	sp, #28
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d003      	beq.n	800159a <HAL_CAN_GetRxMessage+0x24>
 8001592:	7dfb      	ldrb	r3, [r7, #23]
 8001594:	2b02      	cmp	r3, #2
 8001596:	f040 80f3 	bne.w	8001780 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10e      	bne.n	80015be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0e7      	b.n	800178e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d107      	bne.n	80015dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0d8      	b.n	800178e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	331b      	adds	r3, #27
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4413      	add	r3, r2
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0204 	and.w	r2, r3, #4
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	331b      	adds	r3, #27
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4413      	add	r3, r2
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0d5b      	lsrs	r3, r3, #21
 800160a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e00b      	b.n	800162c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	331b      	adds	r3, #27
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	4413      	add	r3, r2
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	08db      	lsrs	r3, r3, #3
 8001624:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	331b      	adds	r3, #27
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4413      	add	r3, r2
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0202 	and.w	r2, r3, #2
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	331b      	adds	r3, #27
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	3304      	adds	r3, #4
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 020f 	and.w	r2, r3, #15
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	331b      	adds	r3, #27
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	4413      	add	r3, r2
 8001666:	3304      	adds	r3, #4
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b2da      	uxtb	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	331b      	adds	r3, #27
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	4413      	add	r3, r2
 800167e:	3304      	adds	r3, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	0c1b      	lsrs	r3, r3, #16
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0a1a      	lsrs	r2, r3, #8
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4413      	add	r3, r2
 80016c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	0c1a      	lsrs	r2, r3, #16
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3302      	adds	r3, #2
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	4413      	add	r3, r2
 80016de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0e1a      	lsrs	r2, r3, #24
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3303      	adds	r3, #3
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3304      	adds	r3, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	0a1a      	lsrs	r2, r3, #8
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	3305      	adds	r3, #5
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0c1a      	lsrs	r2, r3, #16
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3306      	adds	r3, #6
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	4413      	add	r3, r2
 8001744:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0e1a      	lsrs	r2, r3, #24
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3307      	adds	r3, #7
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d108      	bne.n	800176c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0220 	orr.w	r2, r2, #32
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	e007      	b.n	800177c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0220 	orr.w	r2, r2, #32
 800177a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	e006      	b.n	800178e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
  }
}
 800178e:	4618      	mov	r0, r3
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017aa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d002      	beq.n	80017b8 <HAL_CAN_ActivateNotification+0x1e>
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d109      	bne.n	80017cc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6959      	ldr	r1, [r3, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e006      	b.n	80017da <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b08a      	sub	sp, #40	; 0x28
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d07c      	beq.n	8001926 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d023      	beq.n	800187e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f983 	bl	8001b54 <HAL_CAN_TxMailbox0CompleteCallback>
 800184e:	e016      	b.n	800187e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	e00c      	b.n	800187e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	e002      	b.n	800187e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f989 	bl	8001b90 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d024      	beq.n	80018d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001890:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f963 	bl	8001b68 <HAL_CAN_TxMailbox1CompleteCallback>
 80018a2:	e016      	b.n	80018d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
 80018b6:	e00c      	b.n	80018d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ca:	e002      	b.n	80018d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f969 	bl	8001ba4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d024      	beq.n	8001926 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f943 	bl	8001b7c <HAL_CAN_TxMailbox2CompleteCallback>
 80018f6:	e016      	b.n	8001926 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	e00c      	b.n	8001926 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	e002      	b.n	8001926 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f949 	bl	8001bb8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00c      	beq.n	800194a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001940:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2210      	movs	r2, #16
 8001948:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00b      	beq.n	800196c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2208      	movs	r2, #8
 8001964:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f930 	bl	8001bcc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7fe fde5 	bl	8000554 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00c      	beq.n	80019ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2210      	movs	r2, #16
 80019ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2208      	movs	r2, #8
 80019c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f912 	bl	8001bf4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f8f9 	bl	8001be0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00b      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2210      	movs	r2, #16
 8001a08:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8fc 	bl	8001c08 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f8f5 	bl	8001c1c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d07b      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d072      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d043      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d03e      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ab4:	2b60      	cmp	r3, #96	; 0x60
 8001ab6:	d02b      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x32a>
 8001ab8:	2b60      	cmp	r3, #96	; 0x60
 8001aba:	d82e      	bhi.n	8001b1a <HAL_CAN_IRQHandler+0x334>
 8001abc:	2b50      	cmp	r3, #80	; 0x50
 8001abe:	d022      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x320>
 8001ac0:	2b50      	cmp	r3, #80	; 0x50
 8001ac2:	d82a      	bhi.n	8001b1a <HAL_CAN_IRQHandler+0x334>
 8001ac4:	2b40      	cmp	r3, #64	; 0x40
 8001ac6:	d019      	beq.n	8001afc <HAL_CAN_IRQHandler+0x316>
 8001ac8:	2b40      	cmp	r3, #64	; 0x40
 8001aca:	d826      	bhi.n	8001b1a <HAL_CAN_IRQHandler+0x334>
 8001acc:	2b30      	cmp	r3, #48	; 0x30
 8001ace:	d010      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x30c>
 8001ad0:	2b30      	cmp	r3, #48	; 0x30
 8001ad2:	d822      	bhi.n	8001b1a <HAL_CAN_IRQHandler+0x334>
 8001ad4:	2b10      	cmp	r3, #16
 8001ad6:	d002      	beq.n	8001ade <HAL_CAN_IRQHandler+0x2f8>
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d005      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001adc:	e01d      	b.n	8001b1a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ae6:	e019      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001af0:	e014      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	f043 0320 	orr.w	r3, r3, #32
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001afa:	e00f      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b04:	e00a      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b0e:	e005      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b18:	e000      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            break;
 8001b1a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b2a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2204      	movs	r2, #4
 8001b32:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d008      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f872 	bl	8001c30 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <__NVIC_SetPriorityGrouping>:
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <__NVIC_EnableIRQ+0x38>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_DisableIRQ>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db12      	blt.n	8001d1c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	490a      	ldr	r1, [pc, #40]	; (8001d28 <__NVIC_DisableIRQ+0x44>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	3320      	adds	r3, #32
 8001d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d10:	f3bf 8f4f 	dsb	sy
}
 8001d14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d16:	f3bf 8f6f 	isb	sy
}
 8001d1a:	bf00      	nop
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	db0a      	blt.n	8001d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <__NVIC_SetPriority+0x4c>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d54:	e00a      	b.n	8001d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4908      	ldr	r1, [pc, #32]	; (8001d7c <__NVIC_SetPriority+0x50>)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3b04      	subs	r3, #4
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	761a      	strb	r2, [r3, #24]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f1c3 0307 	rsb	r3, r3, #7
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	bf28      	it	cs
 8001d9e:	2304      	movcs	r3, #4
 8001da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3304      	adds	r3, #4
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d902      	bls.n	8001db0 <NVIC_EncodePriority+0x30>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3b03      	subs	r3, #3
 8001dae:	e000      	b.n	8001db2 <NVIC_EncodePriority+0x32>
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	4313      	orrs	r3, r2
         );
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df8:	d301      	bcc.n	8001dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00f      	b.n	8001e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <SysTick_Config+0x40>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e06:	210f      	movs	r1, #15
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e0c:	f7ff ff8e 	bl	8001d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SysTick_Config+0x40>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <SysTick_Config+0x40>)
 8001e18:	2207      	movs	r2, #7
 8001e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff05 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e54:	f7ff ff1a 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7ff ff8e 	bl	8001d80 <NVIC_EncodePriority>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff5d 	bl	8001d2c <__NVIC_SetPriority>
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff0d 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff1d 	bl	8001ce4 <__NVIC_DisableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ff94 	bl	8001de8 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	e166      	b.n	80021aa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8158 	beq.w	80021a4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d00b      	beq.n	8001f14 <HAL_GPIO_Init+0x48>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d007      	beq.n	8001f14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f08:	2b11      	cmp	r3, #17
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b12      	cmp	r3, #18
 8001f12:	d130      	bne.n	8001f76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 0201 	and.w	r2, r3, #1
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0xea>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b12      	cmp	r3, #18
 8001fb4:	d123      	bne.n	8001ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	220f      	movs	r2, #15
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	08da      	lsrs	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3208      	adds	r2, #8
 8001ff8:	6939      	ldr	r1, [r7, #16]
 8001ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0203 	and.w	r2, r3, #3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80b2 	beq.w	80021a4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002040:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <HAL_GPIO_Init+0x2fc>)
 8002042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002044:	4a60      	ldr	r2, [pc, #384]	; (80021c8 <HAL_GPIO_Init+0x2fc>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6613      	str	r3, [r2, #96]	; 0x60
 800204c:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <HAL_GPIO_Init+0x2fc>)
 800204e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002058:	4a5c      	ldr	r2, [pc, #368]	; (80021cc <HAL_GPIO_Init+0x300>)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	220f      	movs	r2, #15
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002082:	d02b      	beq.n	80020dc <HAL_GPIO_Init+0x210>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_GPIO_Init+0x304>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d025      	beq.n	80020d8 <HAL_GPIO_Init+0x20c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a51      	ldr	r2, [pc, #324]	; (80021d4 <HAL_GPIO_Init+0x308>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d01f      	beq.n	80020d4 <HAL_GPIO_Init+0x208>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a50      	ldr	r2, [pc, #320]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d019      	beq.n	80020d0 <HAL_GPIO_Init+0x204>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a4f      	ldr	r2, [pc, #316]	; (80021dc <HAL_GPIO_Init+0x310>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d013      	beq.n	80020cc <HAL_GPIO_Init+0x200>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <HAL_GPIO_Init+0x314>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00d      	beq.n	80020c8 <HAL_GPIO_Init+0x1fc>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a4d      	ldr	r2, [pc, #308]	; (80021e4 <HAL_GPIO_Init+0x318>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <HAL_GPIO_Init+0x1f8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a4c      	ldr	r2, [pc, #304]	; (80021e8 <HAL_GPIO_Init+0x31c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_GPIO_Init+0x1f4>
 80020bc:	2307      	movs	r3, #7
 80020be:	e00e      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020c0:	2308      	movs	r3, #8
 80020c2:	e00c      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020c4:	2306      	movs	r3, #6
 80020c6:	e00a      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020c8:	2305      	movs	r3, #5
 80020ca:	e008      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020cc:	2304      	movs	r3, #4
 80020ce:	e006      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020d0:	2303      	movs	r3, #3
 80020d2:	e004      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e002      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020dc:	2300      	movs	r3, #0
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	f002 0203 	and.w	r2, r2, #3
 80020e4:	0092      	lsls	r2, r2, #2
 80020e6:	4093      	lsls	r3, r2
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ee:	4937      	ldr	r1, [pc, #220]	; (80021cc <HAL_GPIO_Init+0x300>)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3302      	adds	r3, #2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_GPIO_Init+0x320>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	43db      	mvns	r3, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002120:	4a32      	ldr	r2, [pc, #200]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800214a:	4a28      	ldr	r2, [pc, #160]	; (80021ec <HAL_GPIO_Init+0x320>)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002150:	4b26      	ldr	r3, [pc, #152]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_GPIO_Init+0x320>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800219e:	4a13      	ldr	r2, [pc, #76]	; (80021ec <HAL_GPIO_Init+0x320>)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3301      	adds	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f47f ae91 	bne.w	8001edc <HAL_GPIO_Init+0x10>
  }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40010000 	.word	0x40010000
 80021d0:	48000400 	.word	0x48000400
 80021d4:	48000800 	.word	0x48000800
 80021d8:	48000c00 	.word	0x48000c00
 80021dc:	48001000 	.word	0x48001000
 80021e0:	48001400 	.word	0x48001400
 80021e4:	48001800 	.word	0x48001800
 80021e8:	48001c00 	.word	0x48001c00
 80021ec:	40010400 	.word	0x40010400

080021f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
 80021fc:	4613      	mov	r3, r2
 80021fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002200:	787b      	ldrb	r3, [r7, #1]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800220c:	e002      	b.n	8002214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4013      	ands	r3, r2
 8002238:	041a      	lsls	r2, r3, #16
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43d9      	mvns	r1, r3
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	400b      	ands	r3, r1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe f9e6 	bl	8000644 <HAL_GPIO_EXTI_Callback>
  }
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40010400 	.word	0x40010400

08002284 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002286:	b08f      	sub	sp, #60	; 0x3c
 8002288:	af0a      	add	r7, sp, #40	; 0x28
 800228a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e116      	b.n	80024c4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d106      	bne.n	80022b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f006 fae3 	bl	800887c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2203      	movs	r2, #3
 80022ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f003 fae0 	bl	800589a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	687e      	ldr	r6, [r7, #4]
 80022e2:	466d      	mov	r5, sp
 80022e4:	f106 0410 	add.w	r4, r6, #16
 80022e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80022f8:	1d33      	adds	r3, r6, #4
 80022fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022fc:	6838      	ldr	r0, [r7, #0]
 80022fe:	f003 f9f3 	bl	80056e8 <USB_CoreInit>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0d7      	b.n	80024c4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f003 face 	bl	80058bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e04a      	b.n	80023bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	333d      	adds	r3, #61	; 0x3d
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	333c      	adds	r3, #60	; 0x3c
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	b298      	uxth	r0, r3
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	3342      	adds	r3, #66	; 0x42
 8002362:	4602      	mov	r2, r0
 8002364:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	333f      	adds	r3, #63	; 0x3f
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3344      	adds	r3, #68	; 0x44
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3348      	adds	r3, #72	; 0x48
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3350      	adds	r3, #80	; 0x50
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	3301      	adds	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d3af      	bcc.n	8002326 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	e044      	b.n	8002456 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	3301      	adds	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3b5      	bcc.n	80023cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	687e      	ldr	r6, [r7, #4]
 8002468:	466d      	mov	r5, sp
 800246a:	f106 0410 	add.w	r4, r6, #16
 800246e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002476:	e894 0003 	ldmia.w	r4, {r0, r1}
 800247a:	e885 0003 	stmia.w	r5, {r0, r1}
 800247e:	1d33      	adds	r3, r6, #4
 8002480:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002482:	6838      	ldr	r0, [r7, #0]
 8002484:	f003 fa44 	bl	8005910 <USB_DevInit>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e014      	b.n	80024c4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d102      	bne.n	80024b8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 ff62 	bl	800337c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f004 f9c6 	bl	800684e <USB_DevDisconnect>

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_PCD_Start+0x1c>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e01c      	b.n	8002522 <HAL_PCD_Start+0x56>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f003 f9b5 	bl	8005878 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f004 f97a 	bl	800680c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800252a:	b590      	push	{r4, r7, lr}
 800252c:	b08d      	sub	sp, #52	; 0x34
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f004 fa38 	bl	80069b6 <USB_GetMode>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 838f 	bne.w	8002c6c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f004 f99c 	bl	8006890 <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8385 	beq.w	8002c6a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f004 f993 	bl	8006890 <USB_ReadInterrupts>
 800256a:	4603      	mov	r3, r0
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b02      	cmp	r3, #2
 8002572:	d107      	bne.n	8002584 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f002 0202 	and.w	r2, r2, #2
 8002582:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f004 f981 	bl	8006890 <USB_ReadInterrupts>
 800258e:	4603      	mov	r3, r0
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b10      	cmp	r3, #16
 8002596:	d161      	bne.n	800265c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0210 	bic.w	r2, r2, #16
 80025a6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 020f 	and.w	r2, r3, #15
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	3304      	adds	r3, #4
 80025c6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	0c5b      	lsrs	r3, r3, #17
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d124      	bne.n	800261e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d035      	beq.n	800264c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	6a38      	ldr	r0, [r7, #32]
 80025f4:	f003 ffe7 	bl	80065c6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002604:	441a      	add	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002616:	441a      	add	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	619a      	str	r2, [r3, #24]
 800261c:	e016      	b.n	800264c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	0c5b      	lsrs	r3, r3, #17
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	2b06      	cmp	r3, #6
 8002628:	d110      	bne.n	800264c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002630:	2208      	movs	r2, #8
 8002632:	4619      	mov	r1, r3
 8002634:	6a38      	ldr	r0, [r7, #32]
 8002636:	f003 ffc6 	bl	80065c6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002646:	441a      	add	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0210 	orr.w	r2, r2, #16
 800265a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f004 f915 	bl	8006890 <USB_ReadInterrupts>
 8002666:	4603      	mov	r3, r0
 8002668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002670:	d16e      	bne.n	8002750 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f004 f91b 	bl	80068b6 <USB_ReadDevAllOutEpInterrupt>
 8002680:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002682:	e062      	b.n	800274a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d057      	beq.n	800273e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f004 f940 	bl	800691e <USB_ReadDevOutEPInterrupt>
 800269e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00c      	beq.n	80026c4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b6:	461a      	mov	r2, r3
 80026b8:	2301      	movs	r3, #1
 80026ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fd82 	bl	80031c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00c      	beq.n	80026e8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026da:	461a      	mov	r2, r3
 80026dc:	2308      	movs	r3, #8
 80026de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fdbe 	bl	8003264 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fe:	461a      	mov	r2, r3
 8002700:	2310      	movs	r3, #16
 8002702:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	4413      	add	r3, r2
 8002716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271a:	461a      	mov	r2, r3
 800271c:	2320      	movs	r3, #32
 800271e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4413      	add	r3, r2
 8002732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002736:	461a      	mov	r2, r3
 8002738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800273c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	3301      	adds	r3, #1
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d199      	bne.n	8002684 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f004 f89b 	bl	8006890 <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002764:	f040 8087 	bne.w	8002876 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f004 f8bc 	bl	80068ea <USB_ReadDevAllInEpInterrupt>
 8002772:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002778:	e07a      	b.n	8002870 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d06f      	beq.n	8002864 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f004 f8e3 	bl	800695a <USB_ReadDevInEPInterrupt>
 8002794:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	2201      	movs	r2, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69f9      	ldr	r1, [r7, #28]
 80027bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027c0:	4013      	ands	r3, r2
 80027c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d0:	461a      	mov	r2, r3
 80027d2:	2301      	movs	r3, #1
 80027d4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	4619      	mov	r1, r3
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f006 f8ee 	bl	80089be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f8:	461a      	mov	r2, r3
 80027fa:	2308      	movs	r3, #8
 80027fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002814:	461a      	mov	r2, r3
 8002816:	2310      	movs	r3, #16
 8002818:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	4413      	add	r3, r2
 800282c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002830:	461a      	mov	r2, r3
 8002832:	2340      	movs	r3, #64	; 0x40
 8002834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284c:	461a      	mov	r2, r3
 800284e:	2302      	movs	r3, #2
 8002850:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800285c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fc29 	bl	80030b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	3301      	adds	r3, #1
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	085b      	lsrs	r3, r3, #1
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	2b00      	cmp	r3, #0
 8002874:	d181      	bne.n	800277a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f004 f808 	bl	8006890 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800288a:	d122      	bne.n	80028d2 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d108      	bne.n	80028bc <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028b2:	2100      	movs	r1, #0
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fd85 	bl	80033c4 <HAL_PCDEx_LPM_Callback>
 80028ba:	e002      	b.n	80028c2 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f006 f8eb 	bl	8008a98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 ffda 	bl	8006890 <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e6:	d112      	bne.n	800290e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d102      	bne.n	80028fe <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f006 f8a7 	bl	8008a4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800290c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f003 ffbc 	bl	8006890 <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800291e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002922:	d121      	bne.n	8002968 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002932:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d111      	bne.n	8002962 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002958:	2101      	movs	r1, #1
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fd32 	bl	80033c4 <HAL_PCDEx_LPM_Callback>
 8002960:	e002      	b.n	8002968 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f006 f872 	bl	8008a4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f003 ff8f 	bl	8006890 <USB_ReadInterrupts>
 8002972:	4603      	mov	r3, r0
 8002974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297c:	f040 80c5 	bne.w	8002b0a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2110      	movs	r1, #16
 800299a:	4618      	mov	r0, r3
 800299c:	f003 f904 	bl	8005ba8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a4:	e056      	b.n	8002a54 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029b2:	461a      	mov	r2, r3
 80029b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ca:	0151      	lsls	r1, r2, #5
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	440a      	add	r2, r1
 80029d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029d8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ea:	0151      	lsls	r1, r2, #5
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	440a      	add	r2, r1
 80029f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a06:	461a      	mov	r2, r3
 8002a08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a0c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1e:	0151      	lsls	r1, r2, #5
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	440a      	add	r2, r1
 8002a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a3e:	0151      	lsls	r1, r2, #5
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	440a      	add	r2, r1
 8002a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a4c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	3301      	adds	r3, #1
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d3a3      	bcc.n	80029a6 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a6c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d016      	beq.n	8002aa8 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a8a:	f043 030b 	orr.w	r3, r3, #11
 8002a8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa0:	f043 030b 	orr.w	r3, r3, #11
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	e015      	b.n	8002ad4 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002abe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ace:	f043 030b 	orr.w	r3, r3, #11
 8002ad2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ae6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002af2:	4619      	mov	r1, r3
 8002af4:	4610      	mov	r0, r2
 8002af6:	f003 ff8f 	bl	8006a18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f003 febe 	bl	8006890 <USB_ReadInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1e:	d124      	bne.n	8002b6a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 ff54 	bl	80069d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 f89b 	bl	8005c6a <USB_GetDevSpeed>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681c      	ldr	r4, [r3, #0]
 8002b40:	f001 fb0e 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 8002b44:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f002 fdf6 	bl	8005740 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f005 ff5a 	bl	8008a0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fe8e 	bl	8006890 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d10a      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f005 ff37 	bl	80089f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f002 0208 	and.w	r2, r2, #8
 8002b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 fe79 	bl	8006890 <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba8:	d10f      	bne.n	8002bca <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f005 ffa9 	bl	8008b0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 fe5e 	bl	8006890 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bde:	d10f      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f005 ff7c 	bl	8008ae8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f003 fe43 	bl	8006890 <USB_ReadInterrupts>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d10a      	bne.n	8002c2c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f005 ff8a 	bl	8008b30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fe2d 	bl	8006890 <USB_ReadInterrupts>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d115      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f005 ff7a 	bl	8008b4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	e000      	b.n	8002c6c <HAL_PCD_IRQHandler+0x742>
      return;
 8002c6a:	bf00      	nop
    }
  }
}
 8002c6c:	3734      	adds	r7, #52	; 0x34
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd90      	pop	{r4, r7, pc}

08002c72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_PCD_SetAddress+0x1a>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e013      	b.n	8002cb4 <HAL_PCD_SetAddress+0x42>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f003 fd8b 	bl	80067c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	70fb      	strb	r3, [r7, #3]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	803b      	strh	r3, [r7, #0]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da0f      	bge.n	8002d02 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	3338      	adds	r3, #56	; 0x38
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	705a      	strb	r2, [r3, #1]
 8002d00:	e00f      	b.n	8002d22 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	3304      	adds	r3, #4
 8002d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d2e:	883a      	ldrh	r2, [r7, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	78ba      	ldrb	r2, [r7, #2]
 8002d38:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	785b      	ldrb	r3, [r3, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d4c:	78bb      	ldrb	r3, [r7, #2]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d102      	bne.n	8002d58 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_PCD_EP_Open+0xaa>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e00e      	b.n	8002d84 <HAL_PCD_EP_Open+0xc8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68f9      	ldr	r1, [r7, #12]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f002 ff97 	bl	8005ca8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d82:	7afb      	ldrb	r3, [r7, #11]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da0f      	bge.n	8002dc0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 020f 	and.w	r2, r3, #15
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	3338      	adds	r3, #56	; 0x38
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	705a      	strb	r2, [r3, #1]
 8002dbe:	e00f      	b.n	8002de0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 020f 	and.w	r2, r3, #15
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_PCD_EP_Close+0x6e>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e00e      	b.n	8002e18 <HAL_PCD_EP_Close+0x8c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68f9      	ldr	r1, [r7, #12]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f002 ffd5 	bl	8005db8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4413      	add	r3, r2
 8002e46:	3304      	adds	r3, #4
 8002e48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e6e:	7afb      	ldrb	r3, [r7, #11]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6979      	ldr	r1, [r7, #20]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 fa52 	bl	8006328 <USB_EP0StartXfer>
 8002e84:	e005      	b.n	8002e92 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6979      	ldr	r1, [r7, #20]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 f86f 	bl	8005f70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	f003 020f 	and.w	r2, r3, #15
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002edc:	7afb      	ldrb	r3, [r7, #11]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	3338      	adds	r3, #56	; 0x38
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f0c:	7afb      	ldrb	r3, [r7, #11]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f18:	7afb      	ldrb	r3, [r7, #11]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6979      	ldr	r1, [r7, #20]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 f9fd 	bl	8006328 <USB_EP0StartXfer>
 8002f2e:	e005      	b.n	8002f3c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6979      	ldr	r1, [r7, #20]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 f81a 	bl	8005f70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 020f 	and.w	r2, r3, #15
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d901      	bls.n	8002f64 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e04e      	b.n	8003002 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	da0f      	bge.n	8002f8c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	f003 020f 	and.w	r2, r3, #15
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	3338      	adds	r3, #56	; 0x38
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	3304      	adds	r3, #4
 8002f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	705a      	strb	r2, [r3, #1]
 8002f8a:	e00d      	b.n	8002fa8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_PCD_EP_SetStall+0x82>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e01c      	b.n	8003002 <HAL_PCD_EP_SetStall+0xbc>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68f9      	ldr	r1, [r7, #12]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 fb1e 	bl	8006618 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d108      	bne.n	8002ff8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f003 fd10 	bl	8006a18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 020f 	and.w	r2, r3, #15
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d901      	bls.n	8003028 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e042      	b.n	80030ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800302c:	2b00      	cmp	r3, #0
 800302e:	da0f      	bge.n	8003050 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f003 020f 	and.w	r2, r3, #15
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	3338      	adds	r3, #56	; 0x38
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	4413      	add	r3, r2
 8003044:	3304      	adds	r3, #4
 8003046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	705a      	strb	r2, [r3, #1]
 800304e:	e00f      	b.n	8003070 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	f003 020f 	and.w	r2, r3, #15
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	3304      	adds	r3, #4
 8003068:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	b2da      	uxtb	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_PCD_EP_ClrStall+0x86>
 800308c:	2302      	movs	r3, #2
 800308e:	e00e      	b.n	80030ae <HAL_PCD_EP_ClrStall+0xa4>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68f9      	ldr	r1, [r7, #12]
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 fb28 	bl	80066f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b088      	sub	sp, #32
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	3338      	adds	r3, #56	; 0x38
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	3304      	adds	r3, #4
 80030dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d901      	bls.n	80030ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e067      	b.n	80031be <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	429a      	cmp	r2, r3
 8003102:	d902      	bls.n	800310a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3303      	adds	r3, #3
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003112:	e026      	b.n	8003162 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	429a      	cmp	r2, r3
 8003128:	d902      	bls.n	8003130 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	3303      	adds	r3, #3
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68d9      	ldr	r1, [r3, #12]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	b29b      	uxth	r3, r3
 8003144:	6978      	ldr	r0, [r7, #20]
 8003146:	f003 fa0d 	bl	8006564 <USB_WritePacket>

    ep->xfer_buff  += len;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	441a      	add	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	441a      	add	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	b29b      	uxth	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	429a      	cmp	r2, r3
 8003176:	d809      	bhi.n	800318c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003180:	429a      	cmp	r2, r3
 8003182:	d203      	bcs.n	800318c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1c3      	bne.n	8003114 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	429a      	cmp	r2, r3
 8003196:	d811      	bhi.n	80031bc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	2201      	movs	r2, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	6939      	ldr	r1, [r7, #16]
 80031b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031b8:	4013      	ands	r3, r2
 80031ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	333c      	adds	r3, #60	; 0x3c
 80031e0:	3304      	adds	r3, #4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a19      	ldr	r2, [pc, #100]	; (8003260 <PCD_EP_OutXfrComplete_int+0x98>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d124      	bne.n	8003248 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003214:	461a      	mov	r2, r3
 8003216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321a:	6093      	str	r3, [r2, #8]
 800321c:	e01a      	b.n	8003254 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	461a      	mov	r2, r3
 8003236:	2320      	movs	r3, #32
 8003238:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f005 fba1 	bl	8008988 <HAL_PCD_DataOutStageCallback>
 8003246:	e005      	b.n	8003254 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	4619      	mov	r1, r3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f005 fb9a 	bl	8008988 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	4f54310a 	.word	0x4f54310a

08003264 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	333c      	adds	r3, #60	; 0x3c
 800327c:	3304      	adds	r3, #4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <PCD_EP_OutSetupPacket_int+0x64>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d90e      	bls.n	80032b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b0:	461a      	mov	r2, r3
 80032b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f005 fb53 	bl	8008964 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	4f54300a 	.word	0x4f54300a

080032cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	70fb      	strb	r3, [r7, #3]
 80032d8:	4613      	mov	r3, r2
 80032da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d107      	bne.n	80032fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032ea:	883b      	ldrh	r3, [r7, #0]
 80032ec:	0419      	lsls	r1, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
 80032f8:	e028      	b.n	800334c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	0c1b      	lsrs	r3, r3, #16
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	4413      	add	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]
 800330c:	e00d      	b.n	800332a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	3340      	adds	r3, #64	; 0x40
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	4413      	add	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	3301      	adds	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	3b01      	subs	r3, #1
 8003330:	429a      	cmp	r2, r3
 8003332:	d3ec      	bcc.n	800330e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003334:	883b      	ldrh	r3, [r7, #0]
 8003336:	0418      	lsls	r0, r3, #16
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6819      	ldr	r1, [r3, #0]
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	3b01      	subs	r3, #1
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	4302      	orrs	r2, r0
 8003344:	3340      	adds	r3, #64	; 0x40
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	887a      	ldrh	r2, [r7, #2]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	f043 0303 	orr.w	r3, r3, #3
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_PWREx_GetVoltageRange+0x3c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ec:	d102      	bne.n	80033f4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80033ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f2:	e00b      	b.n	800340c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_PWREx_GetVoltageRange+0x3c>)
 80033f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003402:	d102      	bne.n	800340a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003408:	e000      	b.n	800340c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800340a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40007000 	.word	0x40007000

0800341c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d141      	bne.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800342a:	4b4b      	ldr	r3, [pc, #300]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003436:	d131      	bne.n	800349c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003438:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800343e:	4a46      	ldr	r2, [pc, #280]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003448:	4b43      	ldr	r3, [pc, #268]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003450:	4a41      	ldr	r2, [pc, #260]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003458:	4b40      	ldr	r3, [pc, #256]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2232      	movs	r2, #50	; 0x32
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	4a3f      	ldr	r2, [pc, #252]	; (8003560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	0c9b      	lsrs	r3, r3, #18
 800346a:	3301      	adds	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346e:	e002      	b.n	8003476 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3b01      	subs	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003482:	d102      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f2      	bne.n	8003470 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800348a:	4b33      	ldr	r3, [pc, #204]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003496:	d158      	bne.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e057      	b.n	800354c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800349c:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a2:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034ac:	e04d      	b.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b4:	d141      	bne.n	800353a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034b6:	4b28      	ldr	r3, [pc, #160]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	d131      	bne.n	8003528 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ca:	4a23      	ldr	r2, [pc, #140]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d4:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2232      	movs	r2, #50	; 0x32
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	4a1c      	ldr	r2, [pc, #112]	; (8003560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	0c9b      	lsrs	r3, r3, #18
 80034f6:	3301      	adds	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fa:	e002      	b.n	8003502 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3b01      	subs	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350e:	d102      	bne.n	8003516 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f2      	bne.n	80034fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003522:	d112      	bne.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e011      	b.n	800354c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003534:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003538:	e007      	b.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003542:	4a05      	ldr	r2, [pc, #20]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003548:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40007000 	.word	0x40007000
 800355c:	20000078 	.word	0x20000078
 8003560:	431bde83 	.word	0x431bde83

08003564 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_PWREx_EnableVddUSB+0x1c>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <HAL_PWREx_EnableVddUSB+0x1c>)
 800356e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003572:	6053      	str	r3, [r2, #4]
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40007000 	.word	0x40007000

08003584 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800358e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003592:	6053      	str	r3, [r2, #4]
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40007000 	.word	0x40007000

080035a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f000 bc16 	b.w	8003de4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b8:	4ba0      	ldr	r3, [pc, #640]	; (800383c <HAL_RCC_OscConfig+0x298>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c2:	4b9e      	ldr	r3, [pc, #632]	; (800383c <HAL_RCC_OscConfig+0x298>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80e4 	beq.w	80037a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_RCC_OscConfig+0x4c>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	f040 808b 	bne.w	80036fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	f040 8087 	bne.w	80036fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035f0:	4b92      	ldr	r3, [pc, #584]	; (800383c <HAL_RCC_OscConfig+0x298>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_OscConfig+0x64>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e3ed      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	4b8b      	ldr	r3, [pc, #556]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <HAL_RCC_OscConfig+0x7e>
 8003618:	4b88      	ldr	r3, [pc, #544]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003620:	e005      	b.n	800362e <HAL_RCC_OscConfig+0x8a>
 8003622:	4b86      	ldr	r3, [pc, #536]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800362e:	4293      	cmp	r3, r2
 8003630:	d223      	bcs.n	800367a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fd9e 	bl	8004178 <RCC_SetFlashLatencyFromMSIRange>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e3ce      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003646:	4b7d      	ldr	r3, [pc, #500]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7c      	ldr	r2, [pc, #496]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800364c:	f043 0308 	orr.w	r3, r3, #8
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b7a      	ldr	r3, [pc, #488]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4977      	ldr	r1, [pc, #476]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003664:	4b75      	ldr	r3, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	4972      	ldr	r1, [pc, #456]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
 8003678:	e025      	b.n	80036c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800367a:	4b70      	ldr	r3, [pc, #448]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a6f      	ldr	r2, [pc, #444]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003680:	f043 0308 	orr.w	r3, r3, #8
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4b6d      	ldr	r3, [pc, #436]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	496a      	ldr	r1, [pc, #424]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003694:	4313      	orrs	r3, r2
 8003696:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003698:	4b68      	ldr	r3, [pc, #416]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	4965      	ldr	r1, [pc, #404]	; (800383c <HAL_RCC_OscConfig+0x298>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fd5e 	bl	8004178 <RCC_SetFlashLatencyFromMSIRange>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e38e      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036c6:	f000 fcbf 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b5b      	ldr	r3, [pc, #364]	; (800383c <HAL_RCC_OscConfig+0x298>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	495a      	ldr	r1, [pc, #360]	; (8003840 <HAL_RCC_OscConfig+0x29c>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	fa22 f303 	lsr.w	r3, r2, r3
 80036e2:	4a58      	ldr	r2, [pc, #352]	; (8003844 <HAL_RCC_OscConfig+0x2a0>)
 80036e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036e6:	4b58      	ldr	r3, [pc, #352]	; (8003848 <HAL_RCC_OscConfig+0x2a4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd fb86 	bl	8000dfc <HAL_InitTick>
 80036f0:	4603      	mov	r3, r0
 80036f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d052      	beq.n	80037a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	e372      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d032      	beq.n	800376c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003706:	4b4d      	ldr	r3, [pc, #308]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a4c      	ldr	r2, [pc, #304]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003712:	f7fd fbc3 	bl	8000e9c <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800371a:	f7fd fbbf 	bl	8000e9c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e35b      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800372c:	4b43      	ldr	r3, [pc, #268]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003738:	4b40      	ldr	r3, [pc, #256]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a3f      	ldr	r2, [pc, #252]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800373e:	f043 0308 	orr.w	r3, r3, #8
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	493a      	ldr	r1, [pc, #232]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003756:	4b39      	ldr	r3, [pc, #228]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	4935      	ldr	r1, [pc, #212]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
 800376a:	e01a      	b.n	80037a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800376c:	4b33      	ldr	r3, [pc, #204]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a32      	ldr	r2, [pc, #200]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003778:	f7fd fb90 	bl	8000e9c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003780:	f7fd fb8c 	bl	8000e9c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e328      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003792:	4b2a      	ldr	r3, [pc, #168]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x1dc>
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d073      	beq.n	8003896 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_OscConfig+0x21c>
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d10e      	bne.n	80037d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d10b      	bne.n	80037d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	4b1e      	ldr	r3, [pc, #120]	; (800383c <HAL_RCC_OscConfig+0x298>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d063      	beq.n	8003894 <HAL_RCC_OscConfig+0x2f0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d15f      	bne.n	8003894 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e305      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e0:	d106      	bne.n	80037f0 <HAL_RCC_OscConfig+0x24c>
 80037e2:	4b16      	ldr	r3, [pc, #88]	; (800383c <HAL_RCC_OscConfig+0x298>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a15      	ldr	r2, [pc, #84]	; (800383c <HAL_RCC_OscConfig+0x298>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e01d      	b.n	800382c <HAL_RCC_OscConfig+0x288>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x270>
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_RCC_OscConfig+0x298>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a0f      	ldr	r2, [pc, #60]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a0c      	ldr	r2, [pc, #48]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0x288>
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a08      	ldr	r2, [pc, #32]	; (800383c <HAL_RCC_OscConfig+0x298>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a05      	ldr	r2, [pc, #20]	; (800383c <HAL_RCC_OscConfig+0x298>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01b      	beq.n	800386c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fd fb32 	bl	8000e9c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	e010      	b.n	800385e <HAL_RCC_OscConfig+0x2ba>
 800383c:	40021000 	.word	0x40021000
 8003840:	080090e0 	.word	0x080090e0
 8003844:	20000078 	.word	0x20000078
 8003848:	2000007c 	.word	0x2000007c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800384c:	f7fd fb26 	bl	8000e9c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e2c2      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800385e:	4baf      	ldr	r3, [pc, #700]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x2a8>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fd fb16 	bl	8000e9c <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003874:	f7fd fb12 	bl	8000e9c <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	; 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e2ae      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003886:	4ba5      	ldr	r3, [pc, #660]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x2d0>
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d060      	beq.n	8003964 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_OscConfig+0x310>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d119      	bne.n	80038e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d116      	bne.n	80038e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b4:	4b99      	ldr	r3, [pc, #612]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_OscConfig+0x328>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e28b      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038cc:	4b93      	ldr	r3, [pc, #588]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	061b      	lsls	r3, r3, #24
 80038da:	4990      	ldr	r1, [pc, #576]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e0:	e040      	b.n	8003964 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d023      	beq.n	8003932 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ea:	4b8c      	ldr	r3, [pc, #560]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a8b      	ldr	r2, [pc, #556]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fd fad1 	bl	8000e9c <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fd facd 	bl	8000e9c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e269      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003910:	4b82      	ldr	r3, [pc, #520]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4b7f      	ldr	r3, [pc, #508]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	061b      	lsls	r3, r3, #24
 800392a:	497c      	ldr	r1, [pc, #496]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
 8003930:	e018      	b.n	8003964 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	4b7a      	ldr	r3, [pc, #488]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a79      	ldr	r2, [pc, #484]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800393c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7fd faad 	bl	8000e9c <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003946:	f7fd faa9 	bl	8000e9c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e245      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003958:	4b70      	ldr	r3, [pc, #448]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f0      	bne.n	8003946 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d03c      	beq.n	80039ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01c      	beq.n	80039b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003978:	4b68      	ldr	r3, [pc, #416]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 800397a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397e:	4a67      	ldr	r2, [pc, #412]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fd fa88 	bl	8000e9c <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003990:	f7fd fa84 	bl	8000e9c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e220      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039a2:	4b5e      	ldr	r3, [pc, #376]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 80039a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ef      	beq.n	8003990 <HAL_RCC_OscConfig+0x3ec>
 80039b0:	e01b      	b.n	80039ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b2:	4b5a      	ldr	r3, [pc, #360]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 80039b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b8:	4a58      	ldr	r2, [pc, #352]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c2:	f7fd fa6b 	bl	8000e9c <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ca:	f7fd fa67 	bl	8000e9c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e203      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039dc:	4b4f      	ldr	r3, [pc, #316]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 80039de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1ef      	bne.n	80039ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80a6 	beq.w	8003b44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f8:	2300      	movs	r3, #0
 80039fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039fc:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10d      	bne.n	8003a24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a08:	4b44      	ldr	r3, [pc, #272]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	4a43      	ldr	r2, [pc, #268]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a12:	6593      	str	r3, [r2, #88]	; 0x58
 8003a14:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a20:	2301      	movs	r3, #1
 8003a22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a24:	4b3e      	ldr	r3, [pc, #248]	; (8003b20 <HAL_RCC_OscConfig+0x57c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d118      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a30:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <HAL_RCC_OscConfig+0x57c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3a      	ldr	r2, [pc, #232]	; (8003b20 <HAL_RCC_OscConfig+0x57c>)
 8003a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3c:	f7fd fa2e 	bl	8000e9c <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a44:	f7fd fa2a 	bl	8000e9c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1c6      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a56:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <HAL_RCC_OscConfig+0x57c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d108      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4d8>
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	4a2a      	ldr	r2, [pc, #168]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a7a:	e024      	b.n	8003ac6 <HAL_RCC_OscConfig+0x522>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d110      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x502>
 8003a84:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a94:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa4:	e00f      	b.n	8003ac6 <HAL_RCC_OscConfig+0x522>
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab6:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003abe:	f023 0304 	bic.w	r3, r3, #4
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7fd f9e5 	bl	8000e9c <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fd f9e1 	bl	8000e9c <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e17b      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_OscConfig+0x578>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0ed      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x532>
 8003afa:	e01a      	b.n	8003b32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd f9ce 	bl	8000e9c <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b02:	e00f      	b.n	8003b24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fd f9ca 	bl	8000e9c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d906      	bls.n	8003b24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e164      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b24:	4ba8      	ldr	r3, [pc, #672]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e8      	bne.n	8003b04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b32:	7ffb      	ldrb	r3, [r7, #31]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d105      	bne.n	8003b44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b38:	4ba3      	ldr	r3, [pc, #652]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	4aa2      	ldr	r2, [pc, #648]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d03c      	beq.n	8003bca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01c      	beq.n	8003b92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b58:	4b9b      	ldr	r3, [pc, #620]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b5e:	4a9a      	ldr	r2, [pc, #616]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fd f998 	bl	8000e9c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b70:	f7fd f994 	bl	8000e9c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e130      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b82:	4b91      	ldr	r3, [pc, #580]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ef      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5cc>
 8003b90:	e01b      	b.n	8003bca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b92:	4b8d      	ldr	r3, [pc, #564]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b98:	4a8b      	ldr	r2, [pc, #556]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fd f97b 	bl	8000e9c <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003baa:	f7fd f977 	bl	8000e9c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e113      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bbc:	4b82      	ldr	r3, [pc, #520]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ef      	bne.n	8003baa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8107 	beq.w	8003de2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	f040 80cb 	bne.w	8003d74 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bde:	4b7a      	ldr	r3, [pc, #488]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f003 0203 	and.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d12c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d123      	bne.n	8003c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d11b      	bne.n	8003c4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d113      	bne.n	8003c4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	3b01      	subs	r3, #1
 8003c32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d109      	bne.n	8003c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	3b01      	subs	r3, #1
 8003c46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d06d      	beq.n	8003d28 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d068      	beq.n	8003d24 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c52:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d105      	bne.n	8003c6a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c5e:	4b5a      	ldr	r3, [pc, #360]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e0ba      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c6e:	4b56      	ldr	r3, [pc, #344]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a55      	ldr	r2, [pc, #340]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c7a:	f7fd f90f 	bl	8000e9c <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c82:	f7fd f90b 	bl	8000e9c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0a7      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c94:	4b4c      	ldr	r3, [pc, #304]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f0      	bne.n	8003c82 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca0:	4b49      	ldr	r3, [pc, #292]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <HAL_RCC_OscConfig+0x828>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cb0:	3a01      	subs	r2, #1
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	4311      	orrs	r1, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cba:	0212      	lsls	r2, r2, #8
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cc2:	0852      	lsrs	r2, r2, #1
 8003cc4:	3a01      	subs	r2, #1
 8003cc6:	0552      	lsls	r2, r2, #21
 8003cc8:	4311      	orrs	r1, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cce:	0852      	lsrs	r2, r2, #1
 8003cd0:	3a01      	subs	r2, #1
 8003cd2:	0652      	lsls	r2, r2, #25
 8003cd4:	4311      	orrs	r1, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cda:	06d2      	lsls	r2, r2, #27
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	493a      	ldr	r1, [pc, #232]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ce4:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a37      	ldr	r2, [pc, #220]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf0:	4b35      	ldr	r3, [pc, #212]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a34      	ldr	r2, [pc, #208]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cfc:	f7fd f8ce 	bl	8000e9c <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fd f8ca 	bl	8000e9c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e066      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d16:	4b2c      	ldr	r3, [pc, #176]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d22:	e05e      	b.n	8003de2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e05d      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d28:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d156      	bne.n	8003de2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d34:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a23      	ldr	r2, [pc, #140]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d40:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d4c:	f7fd f8a6 	bl	8000e9c <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fd f8a2 	bl	8000e9c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e03e      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d66:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x7b0>
 8003d72:	e036      	b.n	8003de2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b0c      	cmp	r3, #12
 8003d78:	d031      	beq.n	8003dde <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a12      	ldr	r2, [pc, #72]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d84:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003d98:	f023 0303 	bic.w	r3, r3, #3
 8003d9c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <HAL_RCC_OscConfig+0x824>)
 8003da4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fd f875 	bl	8000e9c <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db4:	e00c      	b.n	8003dd0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fd f871 	bl	8000e9c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d905      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e00d      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd0:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_RCC_OscConfig+0x848>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1ec      	bne.n	8003db6 <HAL_RCC_OscConfig+0x812>
 8003ddc:	e001      	b.n	8003de2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000

08003df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e10f      	b.n	8004028 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b89      	ldr	r3, [pc, #548]	; (8004030 <HAL_RCC_ClockConfig+0x240>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d910      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b86      	ldr	r3, [pc, #536]	; (8004030 <HAL_RCC_ClockConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 020f 	bic.w	r2, r3, #15
 8003e1e:	4984      	ldr	r1, [pc, #528]	; (8004030 <HAL_RCC_ClockConfig+0x240>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b82      	ldr	r3, [pc, #520]	; (8004030 <HAL_RCC_ClockConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0f7      	b.n	8004028 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8089 	beq.w	8003f58 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d133      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4e:	4b79      	ldr	r3, [pc, #484]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e0e4      	b.n	8004028 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003e5e:	f000 f9e5 	bl	800422c <RCC_GetSysClockFreqFromPLLSource>
 8003e62:	4603      	mov	r3, r0
 8003e64:	4a74      	ldr	r2, [pc, #464]	; (8004038 <HAL_RCC_ClockConfig+0x248>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d955      	bls.n	8003f16 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e6a:	4b72      	ldr	r3, [pc, #456]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e76:	4b6f      	ldr	r3, [pc, #444]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e7e:	4a6d      	ldr	r2, [pc, #436]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	e044      	b.n	8003f16 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d03e      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x126>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d13a      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ea0:	4b64      	ldr	r3, [pc, #400]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ea8:	4a62      	ldr	r2, [pc, #392]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e02f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ebe:	4b5d      	ldr	r3, [pc, #372]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d115      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0ac      	b.n	8004028 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ed6:	4b57      	ldr	r3, [pc, #348]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0a0      	b.n	8004028 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee6:	4b53      	ldr	r3, [pc, #332]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e098      	b.n	8004028 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003ef6:	f000 f8a7 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4a4e      	ldr	r2, [pc, #312]	; (8004038 <HAL_RCC_ClockConfig+0x248>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d909      	bls.n	8003f16 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f02:	4b4c      	ldr	r3, [pc, #304]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f0a:	4a4a      	ldr	r2, [pc, #296]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f16:	4b47      	ldr	r3, [pc, #284]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f023 0203 	bic.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4944      	ldr	r1, [pc, #272]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f28:	f7fc ffb8 	bl	8000e9c <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f30:	f7fc ffb4 	bl	8000e9c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e070      	b.n	8004028 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	4b3b      	ldr	r3, [pc, #236]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 020c 	and.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d1eb      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4b33      	ldr	r3, [pc, #204]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4930      	ldr	r1, [pc, #192]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b80      	cmp	r3, #128	; 0x80
 8003f7c:	d105      	bne.n	8003f8a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f7e:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	4a2c      	ldr	r2, [pc, #176]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f88:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f8a:	4b29      	ldr	r3, [pc, #164]	; (8004030 <HAL_RCC_ClockConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d210      	bcs.n	8003fba <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f98:	4b25      	ldr	r3, [pc, #148]	; (8004030 <HAL_RCC_ClockConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f023 020f 	bic.w	r2, r3, #15
 8003fa0:	4923      	ldr	r1, [pc, #140]	; (8004030 <HAL_RCC_ClockConfig+0x240>)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_RCC_ClockConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d001      	beq.n	8003fba <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e036      	b.n	8004028 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc6:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	4918      	ldr	r1, [pc, #96]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d009      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe4:	4b13      	ldr	r3, [pc, #76]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4910      	ldr	r1, [pc, #64]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ff8:	f000 f826 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <HAL_RCC_ClockConfig+0x244>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	091b      	lsrs	r3, r3, #4
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	490c      	ldr	r1, [pc, #48]	; (800403c <HAL_RCC_ClockConfig+0x24c>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <HAL_RCC_ClockConfig+0x250>)
 8004016:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <HAL_RCC_ClockConfig+0x254>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc feed 	bl	8000dfc <HAL_InitTick>
 8004022:	4603      	mov	r3, r0
 8004024:	73fb      	strb	r3, [r7, #15]

  return status;
 8004026:	7bfb      	ldrb	r3, [r7, #15]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40022000 	.word	0x40022000
 8004034:	40021000 	.word	0x40021000
 8004038:	04c4b400 	.word	0x04c4b400
 800403c:	080090e0 	.word	0x080090e0
 8004040:	20000078 	.word	0x20000078
 8004044:	2000007c 	.word	0x2000007c

08004048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004048:	b480      	push	{r7}
 800404a:	b089      	sub	sp, #36	; 0x24
 800404c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004056:	4b3e      	ldr	r3, [pc, #248]	; (8004150 <HAL_RCC_GetSysClockFreq+0x108>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004060:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_RCC_GetSysClockFreq+0x108>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x34>
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b0c      	cmp	r3, #12
 8004074:	d121      	bne.n	80040ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d11e      	bne.n	80040ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800407c:	4b34      	ldr	r3, [pc, #208]	; (8004150 <HAL_RCC_GetSysClockFreq+0x108>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d107      	bne.n	8004098 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004088:	4b31      	ldr	r3, [pc, #196]	; (8004150 <HAL_RCC_GetSysClockFreq+0x108>)
 800408a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	e005      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004098:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <HAL_RCC_GetSysClockFreq+0x108>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040a4:	4a2b      	ldr	r2, [pc, #172]	; (8004154 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10d      	bne.n	80040d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040b8:	e00a      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d102      	bne.n	80040c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040c0:	4b25      	ldr	r3, [pc, #148]	; (8004158 <HAL_RCC_GetSysClockFreq+0x110>)
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	e004      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040cc:	4b23      	ldr	r3, [pc, #140]	; (800415c <HAL_RCC_GetSysClockFreq+0x114>)
 80040ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d134      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040d6:	4b1e      	ldr	r3, [pc, #120]	; (8004150 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d003      	beq.n	80040ee <HAL_RCC_GetSysClockFreq+0xa6>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d003      	beq.n	80040f4 <HAL_RCC_GetSysClockFreq+0xac>
 80040ec:	e005      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040ee:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <HAL_RCC_GetSysClockFreq+0x110>)
 80040f0:	617b      	str	r3, [r7, #20]
      break;
 80040f2:	e005      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040f4:	4b19      	ldr	r3, [pc, #100]	; (800415c <HAL_RCC_GetSysClockFreq+0x114>)
 80040f6:	617b      	str	r3, [r7, #20]
      break;
 80040f8:	e002      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	617b      	str	r3, [r7, #20]
      break;
 80040fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004100:	4b13      	ldr	r3, [pc, #76]	; (8004150 <HAL_RCC_GetSysClockFreq+0x108>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	3301      	adds	r3, #1
 800410c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800410e:	4b10      	ldr	r3, [pc, #64]	; (8004150 <HAL_RCC_GetSysClockFreq+0x108>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	fb02 f203 	mul.w	r2, r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	fbb2 f3f3 	udiv	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_RCC_GetSysClockFreq+0x108>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	0e5b      	lsrs	r3, r3, #25
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	3301      	adds	r3, #1
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	fbb2 f3f3 	udiv	r3, r2, r3
 800413e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004140:	69bb      	ldr	r3, [r7, #24]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3724      	adds	r7, #36	; 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000
 8004154:	080090f0 	.word	0x080090f0
 8004158:	00f42400 	.word	0x00f42400
 800415c:	007a1200 	.word	0x007a1200

08004160 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004164:	4b03      	ldr	r3, [pc, #12]	; (8004174 <HAL_RCC_GetHCLKFreq+0x14>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000078 	.word	0x20000078

08004178 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004190:	f7ff f924 	bl	80033dc <HAL_PWREx_GetVoltageRange>
 8004194:	6178      	str	r0, [r7, #20]
 8004196:	e014      	b.n	80041c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004198:	4b22      	ldr	r3, [pc, #136]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	4a21      	ldr	r2, [pc, #132]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a2:	6593      	str	r3, [r2, #88]	; 0x58
 80041a4:	4b1f      	ldr	r3, [pc, #124]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041b0:	f7ff f914 	bl	80033dc <HAL_PWREx_GetVoltageRange>
 80041b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041b6:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c8:	d10b      	bne.n	80041e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b80      	cmp	r3, #128	; 0x80
 80041ce:	d913      	bls.n	80041f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2ba0      	cmp	r3, #160	; 0xa0
 80041d4:	d902      	bls.n	80041dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041d6:	2302      	movs	r3, #2
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	e00d      	b.n	80041f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041dc:	2301      	movs	r3, #1
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	e00a      	b.n	80041f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b7f      	cmp	r3, #127	; 0x7f
 80041e6:	d902      	bls.n	80041ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80041e8:	2302      	movs	r3, #2
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	e004      	b.n	80041f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b70      	cmp	r3, #112	; 0x70
 80041f2:	d101      	bne.n	80041f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041f4:	2301      	movs	r3, #1
 80041f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 020f 	bic.w	r2, r3, #15
 8004200:	4909      	ldr	r1, [pc, #36]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004208:	4b07      	ldr	r3, [pc, #28]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	429a      	cmp	r2, r3
 8004214:	d001      	beq.n	800421a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40021000 	.word	0x40021000
 8004228:	40022000 	.word	0x40022000

0800422c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004236:	4b2d      	ldr	r3, [pc, #180]	; (80042ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d118      	bne.n	8004274 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004242:	4b2a      	ldr	r3, [pc, #168]	; (80042ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d107      	bne.n	800425e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800424e:	4b27      	ldr	r3, [pc, #156]	; (80042ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	e005      	b.n	800426a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800425e:	4b23      	ldr	r3, [pc, #140]	; (80042ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800426a:	4a21      	ldr	r2, [pc, #132]	; (80042f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004272:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004274:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d003      	beq.n	800428c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b03      	cmp	r3, #3
 8004288:	d003      	beq.n	8004292 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800428a:	e005      	b.n	8004298 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800428e:	613b      	str	r3, [r7, #16]
    break;
 8004290:	e005      	b.n	800429e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004294:	613b      	str	r3, [r7, #16]
    break;
 8004296:	e002      	b.n	800429e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	613b      	str	r3, [r7, #16]
    break;
 800429c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	3301      	adds	r3, #1
 80042aa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	0a1b      	lsrs	r3, r3, #8
 80042b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	fb02 f203 	mul.w	r2, r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042c4:	4b09      	ldr	r3, [pc, #36]	; (80042ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	0e5b      	lsrs	r3, r3, #25
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	3301      	adds	r3, #1
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80042de:	683b      	ldr	r3, [r7, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40021000 	.word	0x40021000
 80042f0:	080090f0 	.word	0x080090f0
 80042f4:	00f42400 	.word	0x00f42400
 80042f8:	007a1200 	.word	0x007a1200

080042fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004304:	2300      	movs	r3, #0
 8004306:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004308:	2300      	movs	r3, #0
 800430a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004314:	2b00      	cmp	r3, #0
 8004316:	d040      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431c:	2b80      	cmp	r3, #128	; 0x80
 800431e:	d02a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d825      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004324:	2b60      	cmp	r3, #96	; 0x60
 8004326:	d026      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d821      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d006      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d81d      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004338:	2b20      	cmp	r3, #32
 800433a:	d010      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800433c:	e018      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800433e:	4b89      	ldr	r3, [pc, #548]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	4a88      	ldr	r2, [pc, #544]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004348:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800434a:	e015      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3304      	adds	r3, #4
 8004350:	2100      	movs	r1, #0
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fb02 	bl	800495c <RCCEx_PLLSAI1_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800435c:	e00c      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3320      	adds	r3, #32
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fbed 	bl	8004b44 <RCCEx_PLLSAI2_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800436e:	e003      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	74fb      	strb	r3, [r7, #19]
      break;
 8004374:	e000      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800437e:	4b79      	ldr	r3, [pc, #484]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004380:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004384:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800438c:	4975      	ldr	r1, [pc, #468]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004394:	e001      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d047      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ae:	d030      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b4:	d82a      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ba:	d02a      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c0:	d824      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c6:	d008      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xde>
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043cc:	d81e      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	d010      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043d8:	e018      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043da:	4b62      	ldr	r3, [pc, #392]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4a61      	ldr	r2, [pc, #388]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043e6:	e015      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3304      	adds	r3, #4
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fab4 	bl	800495c <RCCEx_PLLSAI1_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043f8:	e00c      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3320      	adds	r3, #32
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fb9f 	bl	8004b44 <RCCEx_PLLSAI2_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800440a:	e003      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	74fb      	strb	r3, [r7, #19]
      break;
 8004410:	e000      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800441a:	4b52      	ldr	r3, [pc, #328]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800441c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	494e      	ldr	r1, [pc, #312]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004430:	e001      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004432:	7cfb      	ldrb	r3, [r7, #19]
 8004434:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 809f 	beq.w	8004582 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004444:	2300      	movs	r3, #0
 8004446:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004448:	4b46      	ldr	r3, [pc, #280]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00d      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445e:	4b41      	ldr	r3, [pc, #260]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004462:	4a40      	ldr	r2, [pc, #256]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004468:	6593      	str	r3, [r2, #88]	; 0x58
 800446a:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004476:	2301      	movs	r3, #1
 8004478:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447a:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a3a      	ldr	r2, [pc, #232]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004484:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004486:	f7fc fd09 	bl	8000e9c <HAL_GetTick>
 800448a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800448c:	e009      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448e:	f7fc fd05 	bl	8000e9c <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d902      	bls.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	74fb      	strb	r3, [r7, #19]
        break;
 80044a0:	e005      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044a2:	4b31      	ldr	r3, [pc, #196]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0ef      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80044ae:	7cfb      	ldrb	r3, [r7, #19]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d15b      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044b4:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044be:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01f      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d019      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044de:	4b21      	ldr	r3, [pc, #132]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ee:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044fe:	4a19      	ldr	r2, [pc, #100]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d016      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fc fcc4 	bl	8000e9c <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004516:	e00b      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7fc fcc0 	bl	8000e9c <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d902      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	74fb      	strb	r3, [r7, #19]
            break;
 800452e:	e006      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004530:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0ec      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800453e:	7cfb      	ldrb	r3, [r7, #19]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10c      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	4903      	ldr	r1, [pc, #12]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800455c:	e008      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	74bb      	strb	r3, [r7, #18]
 8004562:	e005      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004564:	40021000 	.word	0x40021000
 8004568:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004570:	7c7b      	ldrb	r3, [r7, #17]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d105      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004576:	4ba0      	ldr	r3, [pc, #640]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457a:	4a9f      	ldr	r2, [pc, #636]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800457c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004580:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800458e:	4b9a      	ldr	r3, [pc, #616]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f023 0203 	bic.w	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	4996      	ldr	r1, [pc, #600]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045b0:	4b91      	ldr	r3, [pc, #580]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f023 020c 	bic.w	r2, r3, #12
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	498e      	ldr	r1, [pc, #568]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045d2:	4b89      	ldr	r3, [pc, #548]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e0:	4985      	ldr	r1, [pc, #532]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045f4:	4b80      	ldr	r3, [pc, #512]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004602:	497d      	ldr	r1, [pc, #500]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004616:	4b78      	ldr	r3, [pc, #480]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004624:	4974      	ldr	r1, [pc, #464]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004638:	4b6f      	ldr	r3, [pc, #444]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004646:	496c      	ldr	r1, [pc, #432]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800465a:	4b67      	ldr	r3, [pc, #412]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004668:	4963      	ldr	r1, [pc, #396]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800467c:	4b5e      	ldr	r3, [pc, #376]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800468a:	495b      	ldr	r1, [pc, #364]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800469e:	4b56      	ldr	r3, [pc, #344]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	4952      	ldr	r1, [pc, #328]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046c0:	4b4d      	ldr	r3, [pc, #308]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ce:	494a      	ldr	r1, [pc, #296]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046e2:	4b45      	ldr	r3, [pc, #276]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	4941      	ldr	r1, [pc, #260]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004704:	4b3c      	ldr	r3, [pc, #240]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800470a:	f023 0203 	bic.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	4939      	ldr	r1, [pc, #228]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d028      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004726:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004734:	4930      	ldr	r1, [pc, #192]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004744:	d106      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004746:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800474c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004750:	60d3      	str	r3, [r2, #12]
 8004752:	e011      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004758:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800475c:	d10c      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3304      	adds	r3, #4
 8004762:	2101      	movs	r1, #1
 8004764:	4618      	mov	r0, r3
 8004766:	f000 f8f9 	bl	800495c <RCCEx_PLLSAI1_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d04d      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800478c:	d108      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800478e:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004790:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004794:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800479a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800479e:	e012      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80047a0:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047a6:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80047b0:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047be:	490e      	ldr	r1, [pc, #56]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ce:	d106      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d0:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047da:	60d3      	str	r3, [r2, #12]
 80047dc:	e020      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047e6:	d109      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4a02      	ldr	r2, [pc, #8]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f2:	60d3      	str	r3, [r2, #12]
 80047f4:	e014      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004804:	d10c      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3304      	adds	r3, #4
 800480a:	2101      	movs	r1, #1
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f8a5 	bl	800495c <RCCEx_PLLSAI1_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800481c:	7cfb      	ldrb	r3, [r7, #19]
 800481e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d028      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800482c:	4b4a      	ldr	r3, [pc, #296]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483a:	4947      	ldr	r1, [pc, #284]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800484a:	d106      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800484c:	4b42      	ldr	r3, [pc, #264]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a41      	ldr	r2, [pc, #260]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004856:	60d3      	str	r3, [r2, #12]
 8004858:	e011      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004862:	d10c      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	2101      	movs	r1, #1
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f876 	bl	800495c <RCCEx_PLLSAI1_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004874:	7cfb      	ldrb	r3, [r7, #19]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01e      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800488a:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004890:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800489a:	492f      	ldr	r1, [pc, #188]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3304      	adds	r3, #4
 80048b2:	2102      	movs	r1, #2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 f851 	bl	800495c <RCCEx_PLLSAI1_Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048be:	7cfb      	ldrb	r3, [r7, #19]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80048c4:	7cfb      	ldrb	r3, [r7, #19]
 80048c6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00b      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048d4:	4b20      	ldr	r3, [pc, #128]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048da:	f023 0204 	bic.w	r2, r3, #4
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e4:	491c      	ldr	r1, [pc, #112]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048fe:	f023 0218 	bic.w	r2, r3, #24
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	4913      	ldr	r1, [pc, #76]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d017      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800491c:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492c:	490a      	ldr	r1, [pc, #40]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800493a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800493e:	d105      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4a04      	ldr	r2, [pc, #16]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800494a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800494c:	7cbb      	ldrb	r3, [r7, #18]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40021000 	.word	0x40021000

0800495c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800496a:	4b72      	ldr	r3, [pc, #456]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00e      	beq.n	8004994 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004976:	4b6f      	ldr	r3, [pc, #444]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f003 0203 	and.w	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d103      	bne.n	800498e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
       ||
 800498a:	2b00      	cmp	r3, #0
 800498c:	d142      	bne.n	8004a14 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
 8004992:	e03f      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b03      	cmp	r3, #3
 800499a:	d018      	beq.n	80049ce <RCCEx_PLLSAI1_Config+0x72>
 800499c:	2b03      	cmp	r3, #3
 800499e:	d825      	bhi.n	80049ec <RCCEx_PLLSAI1_Config+0x90>
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d002      	beq.n	80049aa <RCCEx_PLLSAI1_Config+0x4e>
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d009      	beq.n	80049bc <RCCEx_PLLSAI1_Config+0x60>
 80049a8:	e020      	b.n	80049ec <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049aa:	4b62      	ldr	r3, [pc, #392]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d11d      	bne.n	80049f2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ba:	e01a      	b.n	80049f2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049bc:	4b5d      	ldr	r3, [pc, #372]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d116      	bne.n	80049f6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049cc:	e013      	b.n	80049f6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049ce:	4b59      	ldr	r3, [pc, #356]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10f      	bne.n	80049fa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049da:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ea:	e006      	b.n	80049fa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
      break;
 80049f0:	e004      	b.n	80049fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049f2:	bf00      	nop
 80049f4:	e002      	b.n	80049fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d108      	bne.n	8004a14 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004a02:	4b4c      	ldr	r3, [pc, #304]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f023 0203 	bic.w	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4949      	ldr	r1, [pc, #292]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 8086 	bne.w	8004b28 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a1c:	4b45      	ldr	r3, [pc, #276]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a44      	ldr	r2, [pc, #272]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a28:	f7fc fa38 	bl	8000e9c <HAL_GetTick>
 8004a2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a2e:	e009      	b.n	8004a44 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a30:	f7fc fa34 	bl	8000e9c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d902      	bls.n	8004a44 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	73fb      	strb	r3, [r7, #15]
        break;
 8004a42:	e005      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a44:	4b3b      	ldr	r3, [pc, #236]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1ef      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d168      	bne.n	8004b28 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d113      	bne.n	8004a84 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a5c:	4b35      	ldr	r3, [pc, #212]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6892      	ldr	r2, [r2, #8]
 8004a68:	0211      	lsls	r1, r2, #8
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68d2      	ldr	r2, [r2, #12]
 8004a6e:	06d2      	lsls	r2, r2, #27
 8004a70:	4311      	orrs	r1, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6852      	ldr	r2, [r2, #4]
 8004a76:	3a01      	subs	r2, #1
 8004a78:	0112      	lsls	r2, r2, #4
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	492d      	ldr	r1, [pc, #180]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	610b      	str	r3, [r1, #16]
 8004a82:	e02d      	b.n	8004ae0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d115      	bne.n	8004ab6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a8a:	4b2a      	ldr	r3, [pc, #168]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	4b2b      	ldr	r3, [pc, #172]	; (8004b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6892      	ldr	r2, [r2, #8]
 8004a96:	0211      	lsls	r1, r2, #8
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6912      	ldr	r2, [r2, #16]
 8004a9c:	0852      	lsrs	r2, r2, #1
 8004a9e:	3a01      	subs	r2, #1
 8004aa0:	0552      	lsls	r2, r2, #21
 8004aa2:	4311      	orrs	r1, r2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6852      	ldr	r2, [r2, #4]
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	0112      	lsls	r2, r2, #4
 8004aac:	430a      	orrs	r2, r1
 8004aae:	4921      	ldr	r1, [pc, #132]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	610b      	str	r3, [r1, #16]
 8004ab4:	e014      	b.n	8004ae0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ab6:	4b1f      	ldr	r3, [pc, #124]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6892      	ldr	r2, [r2, #8]
 8004ac2:	0211      	lsls	r1, r2, #8
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6952      	ldr	r2, [r2, #20]
 8004ac8:	0852      	lsrs	r2, r2, #1
 8004aca:	3a01      	subs	r2, #1
 8004acc:	0652      	lsls	r2, r2, #25
 8004ace:	4311      	orrs	r1, r2
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6852      	ldr	r2, [r2, #4]
 8004ad4:	3a01      	subs	r2, #1
 8004ad6:	0112      	lsls	r2, r2, #4
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	4916      	ldr	r1, [pc, #88]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ae0:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ae6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aec:	f7fc f9d6 	bl	8000e9c <HAL_GetTick>
 8004af0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004af2:	e009      	b.n	8004b08 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004af4:	f7fc f9d2 	bl	8000e9c <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d902      	bls.n	8004b08 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	73fb      	strb	r3, [r7, #15]
          break;
 8004b06:	e005      	b.n	8004b14 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0ef      	beq.n	8004af4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	4904      	ldr	r1, [pc, #16]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
 8004b38:	07ff800f 	.word	0x07ff800f
 8004b3c:	ff9f800f 	.word	0xff9f800f
 8004b40:	f9ff800f 	.word	0xf9ff800f

08004b44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b52:	4b72      	ldr	r3, [pc, #456]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00e      	beq.n	8004b7c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b5e:	4b6f      	ldr	r3, [pc, #444]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0203 	and.w	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d103      	bne.n	8004b76 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
       ||
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d142      	bne.n	8004bfc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
 8004b7a:	e03f      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d018      	beq.n	8004bb6 <RCCEx_PLLSAI2_Config+0x72>
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d825      	bhi.n	8004bd4 <RCCEx_PLLSAI2_Config+0x90>
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d002      	beq.n	8004b92 <RCCEx_PLLSAI2_Config+0x4e>
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d009      	beq.n	8004ba4 <RCCEx_PLLSAI2_Config+0x60>
 8004b90:	e020      	b.n	8004bd4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b92:	4b62      	ldr	r3, [pc, #392]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d11d      	bne.n	8004bda <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba2:	e01a      	b.n	8004bda <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ba4:	4b5d      	ldr	r3, [pc, #372]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d116      	bne.n	8004bde <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb4:	e013      	b.n	8004bde <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bb6:	4b59      	ldr	r3, [pc, #356]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10f      	bne.n	8004be2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bc2:	4b56      	ldr	r3, [pc, #344]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bd2:	e006      	b.n	8004be2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd8:	e004      	b.n	8004be4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e002      	b.n	8004be4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004be2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d108      	bne.n	8004bfc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004bea:	4b4c      	ldr	r3, [pc, #304]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f023 0203 	bic.w	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4949      	ldr	r1, [pc, #292]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f040 8086 	bne.w	8004d10 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c04:	4b45      	ldr	r3, [pc, #276]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a44      	ldr	r2, [pc, #272]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c10:	f7fc f944 	bl	8000e9c <HAL_GetTick>
 8004c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c16:	e009      	b.n	8004c2c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c18:	f7fc f940 	bl	8000e9c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d902      	bls.n	8004c2c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	73fb      	strb	r3, [r7, #15]
        break;
 8004c2a:	e005      	b.n	8004c38 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c2c:	4b3b      	ldr	r3, [pc, #236]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ef      	bne.n	8004c18 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d168      	bne.n	8004d10 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d113      	bne.n	8004c6c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c44:	4b35      	ldr	r3, [pc, #212]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c46:	695a      	ldr	r2, [r3, #20]
 8004c48:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6892      	ldr	r2, [r2, #8]
 8004c50:	0211      	lsls	r1, r2, #8
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68d2      	ldr	r2, [r2, #12]
 8004c56:	06d2      	lsls	r2, r2, #27
 8004c58:	4311      	orrs	r1, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6852      	ldr	r2, [r2, #4]
 8004c5e:	3a01      	subs	r2, #1
 8004c60:	0112      	lsls	r2, r2, #4
 8004c62:	430a      	orrs	r2, r1
 8004c64:	492d      	ldr	r1, [pc, #180]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	614b      	str	r3, [r1, #20]
 8004c6a:	e02d      	b.n	8004cc8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d115      	bne.n	8004c9e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c72:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6892      	ldr	r2, [r2, #8]
 8004c7e:	0211      	lsls	r1, r2, #8
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6912      	ldr	r2, [r2, #16]
 8004c84:	0852      	lsrs	r2, r2, #1
 8004c86:	3a01      	subs	r2, #1
 8004c88:	0552      	lsls	r2, r2, #21
 8004c8a:	4311      	orrs	r1, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6852      	ldr	r2, [r2, #4]
 8004c90:	3a01      	subs	r2, #1
 8004c92:	0112      	lsls	r2, r2, #4
 8004c94:	430a      	orrs	r2, r1
 8004c96:	4921      	ldr	r1, [pc, #132]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	614b      	str	r3, [r1, #20]
 8004c9c:	e014      	b.n	8004cc8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c9e:	4b1f      	ldr	r3, [pc, #124]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ca0:	695a      	ldr	r2, [r3, #20]
 8004ca2:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6892      	ldr	r2, [r2, #8]
 8004caa:	0211      	lsls	r1, r2, #8
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6952      	ldr	r2, [r2, #20]
 8004cb0:	0852      	lsrs	r2, r2, #1
 8004cb2:	3a01      	subs	r2, #1
 8004cb4:	0652      	lsls	r2, r2, #25
 8004cb6:	4311      	orrs	r1, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6852      	ldr	r2, [r2, #4]
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	0112      	lsls	r2, r2, #4
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	4916      	ldr	r1, [pc, #88]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cc8:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fc f8e2 	bl	8000e9c <HAL_GetTick>
 8004cd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cda:	e009      	b.n	8004cf0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cdc:	f7fc f8de 	bl	8000e9c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d902      	bls.n	8004cf0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	73fb      	strb	r3, [r7, #15]
          break;
 8004cee:	e005      	b.n	8004cfc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0ef      	beq.n	8004cdc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	4904      	ldr	r1, [pc, #16]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	07ff800f 	.word	0x07ff800f
 8004d24:	ff9f800f 	.word	0xff9f800f
 8004d28:	f9ff800f 	.word	0xf9ff800f

08004d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e049      	b.n	8004dd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fb ffce 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f000 fae2 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d001      	beq.n	8004df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e04f      	b.n	8004e94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a23      	ldr	r2, [pc, #140]	; (8004ea0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01d      	beq.n	8004e52 <HAL_TIM_Base_Start_IT+0x76>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1e:	d018      	beq.n	8004e52 <HAL_TIM_Base_Start_IT+0x76>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1f      	ldr	r2, [pc, #124]	; (8004ea4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <HAL_TIM_Base_Start_IT+0x76>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ea8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00e      	beq.n	8004e52 <HAL_TIM_Base_Start_IT+0x76>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1c      	ldr	r2, [pc, #112]	; (8004eac <HAL_TIM_Base_Start_IT+0xd0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d009      	beq.n	8004e52 <HAL_TIM_Base_Start_IT+0x76>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d004      	beq.n	8004e52 <HAL_TIM_Base_Start_IT+0x76>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d115      	bne.n	8004e7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b06      	cmp	r3, #6
 8004e62:	d015      	beq.n	8004e90 <HAL_TIM_Base_Start_IT+0xb4>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6a:	d011      	beq.n	8004e90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7c:	e008      	b.n	8004e90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0201 	orr.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e000      	b.n	8004e92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800
 8004eac:	40000c00 	.word	0x40000c00
 8004eb0:	40013400 	.word	0x40013400
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	00010007 	.word	0x00010007

08004ebc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6a1a      	ldr	r2, [r3, #32]
 8004eda:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10f      	bne.n	8004f04 <HAL_TIM_Base_Stop_IT+0x48>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a1a      	ldr	r2, [r3, #32]
 8004eea:	f240 4344 	movw	r3, #1092	; 0x444
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d107      	bne.n	8004f04 <HAL_TIM_Base_Stop_IT+0x48>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d122      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d11b      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f06f 0202 	mvn.w	r2, #2
 8004f46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f9cb 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 8004f62:	e005      	b.n	8004f70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f9bd 	bl	80052e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f9ce 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d122      	bne.n	8004fca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d11b      	bne.n	8004fca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0204 	mvn.w	r2, #4
 8004f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f9a1 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 8004fb6:	e005      	b.n	8004fc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f993 	bl	80052e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f9a4 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d122      	bne.n	800501e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d11b      	bne.n	800501e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f06f 0208 	mvn.w	r2, #8
 8004fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f977 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 800500a:	e005      	b.n	8005018 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f969 	bl	80052e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f97a 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b10      	cmp	r3, #16
 800502a:	d122      	bne.n	8005072 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b10      	cmp	r3, #16
 8005038:	d11b      	bne.n	8005072 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f06f 0210 	mvn.w	r2, #16
 8005042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2208      	movs	r2, #8
 8005048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f94d 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 800505e:	e005      	b.n	800506c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f93f 	bl	80052e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f950 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b01      	cmp	r3, #1
 800507e:	d10e      	bne.n	800509e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f06f 0201 	mvn.w	r2, #1
 8005096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fb fb35 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a8:	2b80      	cmp	r3, #128	; 0x80
 80050aa:	d10e      	bne.n	80050ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	d107      	bne.n	80050ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fafb 	bl	80056c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d8:	d10e      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e4:	2b80      	cmp	r3, #128	; 0x80
 80050e6:	d107      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 faee 	bl	80056d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d10e      	bne.n	8005124 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d107      	bne.n	8005124 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8fe 	bl	8005320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b20      	cmp	r3, #32
 8005130:	d10e      	bne.n	8005150 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b20      	cmp	r3, #32
 800513e:	d107      	bne.n	8005150 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0220 	mvn.w	r2, #32
 8005148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 faae 	bl	80056ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIM_ConfigClockSource+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e0b5      	b.n	80052dc <HAL_TIM_ConfigClockSource+0x184>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800519a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ac:	d03e      	beq.n	800522c <HAL_TIM_ConfigClockSource+0xd4>
 80051ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b2:	f200 8087 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ba:	f000 8085 	beq.w	80052c8 <HAL_TIM_ConfigClockSource+0x170>
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c2:	d87f      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051c4:	2b70      	cmp	r3, #112	; 0x70
 80051c6:	d01a      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0xa6>
 80051c8:	2b70      	cmp	r3, #112	; 0x70
 80051ca:	d87b      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051cc:	2b60      	cmp	r3, #96	; 0x60
 80051ce:	d050      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x11a>
 80051d0:	2b60      	cmp	r3, #96	; 0x60
 80051d2:	d877      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051d4:	2b50      	cmp	r3, #80	; 0x50
 80051d6:	d03c      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0xfa>
 80051d8:	2b50      	cmp	r3, #80	; 0x50
 80051da:	d873      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b40      	cmp	r3, #64	; 0x40
 80051de:	d058      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x13a>
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d86f      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b30      	cmp	r3, #48	; 0x30
 80051e6:	d064      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
 80051e8:	2b30      	cmp	r3, #48	; 0x30
 80051ea:	d86b      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d060      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d867      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05c      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d05a      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051fc:	e062      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6899      	ldr	r1, [r3, #8]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f000 f9a5 	bl	800555c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005220:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	609a      	str	r2, [r3, #8]
      break;
 800522a:	e04e      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	6899      	ldr	r1, [r3, #8]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f000 f98e 	bl	800555c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800524e:	609a      	str	r2, [r3, #8]
      break;
 8005250:	e03b      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	461a      	mov	r2, r3
 8005260:	f000 f902 	bl	8005468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2150      	movs	r1, #80	; 0x50
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f95b 	bl	8005526 <TIM_ITRx_SetConfig>
      break;
 8005270:	e02b      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6859      	ldr	r1, [r3, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	461a      	mov	r2, r3
 8005280:	f000 f921 	bl	80054c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2160      	movs	r1, #96	; 0x60
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f94b 	bl	8005526 <TIM_ITRx_SetConfig>
      break;
 8005290:	e01b      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 f8e2 	bl	8005468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2140      	movs	r1, #64	; 0x40
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f93b 	bl	8005526 <TIM_ITRx_SetConfig>
      break;
 80052b0:	e00b      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f000 f932 	bl	8005526 <TIM_ITRx_SetConfig>
        break;
 80052c2:	e002      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      break;
 80052c4:	bf00      	nop
 80052c6:	e000      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      break;
 80052c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a40      	ldr	r2, [pc, #256]	; (8005448 <TIM_Base_SetConfig+0x114>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d013      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d00f      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a3d      	ldr	r2, [pc, #244]	; (800544c <TIM_Base_SetConfig+0x118>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00b      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a3c      	ldr	r2, [pc, #240]	; (8005450 <TIM_Base_SetConfig+0x11c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d007      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3b      	ldr	r2, [pc, #236]	; (8005454 <TIM_Base_SetConfig+0x120>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3a      	ldr	r2, [pc, #232]	; (8005458 <TIM_Base_SetConfig+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d108      	bne.n	8005386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2f      	ldr	r2, [pc, #188]	; (8005448 <TIM_Base_SetConfig+0x114>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01f      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005394:	d01b      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2c      	ldr	r2, [pc, #176]	; (800544c <TIM_Base_SetConfig+0x118>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d017      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2b      	ldr	r2, [pc, #172]	; (8005450 <TIM_Base_SetConfig+0x11c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2a      	ldr	r2, [pc, #168]	; (8005454 <TIM_Base_SetConfig+0x120>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00f      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a29      	ldr	r2, [pc, #164]	; (8005458 <TIM_Base_SetConfig+0x124>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00b      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a28      	ldr	r2, [pc, #160]	; (800545c <TIM_Base_SetConfig+0x128>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d007      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a27      	ldr	r2, [pc, #156]	; (8005460 <TIM_Base_SetConfig+0x12c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d003      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a26      	ldr	r2, [pc, #152]	; (8005464 <TIM_Base_SetConfig+0x130>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d108      	bne.n	80053e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a10      	ldr	r2, [pc, #64]	; (8005448 <TIM_Base_SetConfig+0x114>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00f      	beq.n	800542c <TIM_Base_SetConfig+0xf8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a12      	ldr	r2, [pc, #72]	; (8005458 <TIM_Base_SetConfig+0x124>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00b      	beq.n	800542c <TIM_Base_SetConfig+0xf8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a11      	ldr	r2, [pc, #68]	; (800545c <TIM_Base_SetConfig+0x128>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d007      	beq.n	800542c <TIM_Base_SetConfig+0xf8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a10      	ldr	r2, [pc, #64]	; (8005460 <TIM_Base_SetConfig+0x12c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_Base_SetConfig+0xf8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0f      	ldr	r2, [pc, #60]	; (8005464 <TIM_Base_SetConfig+0x130>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d103      	bne.n	8005434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	615a      	str	r2, [r3, #20]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40013400 	.word	0x40013400
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800

08005468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0201 	bic.w	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f023 030a 	bic.w	r3, r3, #10
 80054a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b087      	sub	sp, #28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f023 0210 	bic.w	r2, r3, #16
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	031b      	lsls	r3, r3, #12
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005502:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	f043 0307 	orr.w	r3, r3, #7
 8005548:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	609a      	str	r2, [r3, #8]
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	021a      	lsls	r2, r3, #8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	431a      	orrs	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4313      	orrs	r3, r2
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	609a      	str	r2, [r3, #8]
}
 8005590:	bf00      	nop
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e068      	b.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a2e      	ldr	r2, [pc, #184]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d108      	bne.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005600:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1e      	ldr	r2, [pc, #120]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01d      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005626:	d018      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1b      	ldr	r2, [pc, #108]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1a      	ldr	r2, [pc, #104]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00e      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a18      	ldr	r2, [pc, #96]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a13      	ldr	r2, [pc, #76]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a14      	ldr	r2, [pc, #80]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d10c      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4313      	orrs	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40013400 	.word	0x40013400
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40014000 	.word	0x40014000

080056ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e8:	b084      	sub	sp, #16
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	f107 001c 	add.w	r0, r7, #28
 80056f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f001 f9ce 	bl	8006aa8 <USB_CoreReset>
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
 8005722:	e005      	b.n	8005730 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005730:	7bfb      	ldrb	r3, [r7, #15]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800573c:	b004      	add	sp, #16
 800573e:	4770      	bx	lr

08005740 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d165      	bne.n	8005820 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4a3e      	ldr	r2, [pc, #248]	; (8005850 <USB_SetTurnaroundTime+0x110>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d906      	bls.n	800576a <USB_SetTurnaroundTime+0x2a>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4a3d      	ldr	r2, [pc, #244]	; (8005854 <USB_SetTurnaroundTime+0x114>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d202      	bcs.n	800576a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005764:	230f      	movs	r3, #15
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	e05c      	b.n	8005824 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	4a39      	ldr	r2, [pc, #228]	; (8005854 <USB_SetTurnaroundTime+0x114>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d306      	bcc.n	8005780 <USB_SetTurnaroundTime+0x40>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4a38      	ldr	r2, [pc, #224]	; (8005858 <USB_SetTurnaroundTime+0x118>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d202      	bcs.n	8005780 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800577a:	230e      	movs	r3, #14
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	e051      	b.n	8005824 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4a35      	ldr	r2, [pc, #212]	; (8005858 <USB_SetTurnaroundTime+0x118>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d306      	bcc.n	8005796 <USB_SetTurnaroundTime+0x56>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4a34      	ldr	r2, [pc, #208]	; (800585c <USB_SetTurnaroundTime+0x11c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d202      	bcs.n	8005796 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005790:	230d      	movs	r3, #13
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	e046      	b.n	8005824 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	4a30      	ldr	r2, [pc, #192]	; (800585c <USB_SetTurnaroundTime+0x11c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d306      	bcc.n	80057ac <USB_SetTurnaroundTime+0x6c>
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4a2f      	ldr	r2, [pc, #188]	; (8005860 <USB_SetTurnaroundTime+0x120>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d802      	bhi.n	80057ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057a6:	230c      	movs	r3, #12
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	e03b      	b.n	8005824 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4a2c      	ldr	r2, [pc, #176]	; (8005860 <USB_SetTurnaroundTime+0x120>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d906      	bls.n	80057c2 <USB_SetTurnaroundTime+0x82>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4a2b      	ldr	r2, [pc, #172]	; (8005864 <USB_SetTurnaroundTime+0x124>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d802      	bhi.n	80057c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80057bc:	230b      	movs	r3, #11
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	e030      	b.n	8005824 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4a27      	ldr	r2, [pc, #156]	; (8005864 <USB_SetTurnaroundTime+0x124>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d906      	bls.n	80057d8 <USB_SetTurnaroundTime+0x98>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4a26      	ldr	r2, [pc, #152]	; (8005868 <USB_SetTurnaroundTime+0x128>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d802      	bhi.n	80057d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057d2:	230a      	movs	r3, #10
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e025      	b.n	8005824 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4a23      	ldr	r2, [pc, #140]	; (8005868 <USB_SetTurnaroundTime+0x128>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d906      	bls.n	80057ee <USB_SetTurnaroundTime+0xae>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4a22      	ldr	r2, [pc, #136]	; (800586c <USB_SetTurnaroundTime+0x12c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d202      	bcs.n	80057ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80057e8:	2309      	movs	r3, #9
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	e01a      	b.n	8005824 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4a1e      	ldr	r2, [pc, #120]	; (800586c <USB_SetTurnaroundTime+0x12c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d306      	bcc.n	8005804 <USB_SetTurnaroundTime+0xc4>
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4a1d      	ldr	r2, [pc, #116]	; (8005870 <USB_SetTurnaroundTime+0x130>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d802      	bhi.n	8005804 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80057fe:	2308      	movs	r3, #8
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	e00f      	b.n	8005824 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a1a      	ldr	r2, [pc, #104]	; (8005870 <USB_SetTurnaroundTime+0x130>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d906      	bls.n	800581a <USB_SetTurnaroundTime+0xda>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4a19      	ldr	r2, [pc, #100]	; (8005874 <USB_SetTurnaroundTime+0x134>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d202      	bcs.n	800581a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005814:	2307      	movs	r3, #7
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	e004      	b.n	8005824 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800581a:	2306      	movs	r3, #6
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e001      	b.n	8005824 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005820:	2309      	movs	r3, #9
 8005822:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	029b      	lsls	r3, r3, #10
 8005838:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	00d8acbf 	.word	0x00d8acbf
 8005854:	00e4e1c0 	.word	0x00e4e1c0
 8005858:	00f42400 	.word	0x00f42400
 800585c:	01067380 	.word	0x01067380
 8005860:	011a499f 	.word	0x011a499f
 8005864:	01312cff 	.word	0x01312cff
 8005868:	014ca43f 	.word	0x014ca43f
 800586c:	016e3600 	.word	0x016e3600
 8005870:	01a6ab1f 	.word	0x01a6ab1f
 8005874:	01e84800 	.word	0x01e84800

08005878 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f043 0201 	orr.w	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f023 0201 	bic.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d106      	bne.n	80058e8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	e00b      	b.n	8005900 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80058e8:	78fb      	ldrb	r3, [r7, #3]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60da      	str	r2, [r3, #12]
 80058fa:	e001      	b.n	8005900 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e003      	b.n	8005908 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005900:	2032      	movs	r0, #50	; 0x32
 8005902:	f7fb fad7 	bl	8000eb4 <HAL_Delay>

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005910:	b084      	sub	sp, #16
 8005912:	b580      	push	{r7, lr}
 8005914:	b086      	sub	sp, #24
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800591e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e009      	b.n	8005944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3340      	adds	r3, #64	; 0x40
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	2200      	movs	r2, #0
 800593c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	3301      	adds	r3, #1
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	2b0e      	cmp	r3, #14
 8005948:	d9f2      	bls.n	8005930 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800594a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d11c      	bne.n	800598a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800595e:	f043 0302 	orr.w	r3, r3, #2
 8005962:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	e005      	b.n	8005996 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800599c:	461a      	mov	r2, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a8:	4619      	mov	r1, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b0:	461a      	mov	r2, r3
 80059b2:	680b      	ldr	r3, [r1, #0]
 80059b4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059b6:	2103      	movs	r1, #3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f93d 	bl	8005c38 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059be:	2110      	movs	r1, #16
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f8f1 	bl	8005ba8 <USB_FlushTxFifo>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f90f 	bl	8005bf4 <USB_FlushRxFifo>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e6:	461a      	mov	r2, r3
 80059e8:	2300      	movs	r3, #0
 80059ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f2:	461a      	mov	r2, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fe:	461a      	mov	r2, r3
 8005a00:	2300      	movs	r3, #0
 8005a02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a04:	2300      	movs	r3, #0
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	e043      	b.n	8005a92 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a20:	d118      	bne.n	8005a54 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	461a      	mov	r2, r3
 8005a36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e013      	b.n	8005a66 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	e008      	b.n	8005a66 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	461a      	mov	r2, r3
 8005a62:	2300      	movs	r3, #0
 8005a64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a72:	461a      	mov	r2, r3
 8005a74:	2300      	movs	r3, #0
 8005a76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	461a      	mov	r2, r3
 8005a86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d3b7      	bcc.n	8005a0a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	e043      	b.n	8005b28 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab6:	d118      	bne.n	8005aea <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	461a      	mov	r2, r3
 8005acc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e013      	b.n	8005afc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	e008      	b.n	8005afc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af6:	461a      	mov	r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	3301      	adds	r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d3b7      	bcc.n	8005aa0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	f043 0210 	orr.w	r2, r3, #16
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <USB_DevInit+0x294>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f043 0208 	orr.w	r2, r3, #8
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d107      	bne.n	8005b92 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b8a:	f043 0304 	orr.w	r3, r3, #4
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b9e:	b004      	add	sp, #16
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	803c3800 	.word	0x803c3800

08005ba8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	019b      	lsls	r3, r3, #6
 8005bba:	f043 0220 	orr.w	r2, r3, #32
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <USB_FlushTxFifo+0x48>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d901      	bls.n	8005bd4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e006      	b.n	8005be2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d0f0      	beq.n	8005bc2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	00030d40 	.word	0x00030d40

08005bf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2210      	movs	r2, #16
 8005c04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <USB_FlushRxFifo+0x40>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d901      	bls.n	8005c18 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e006      	b.n	8005c26 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d0f0      	beq.n	8005c06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	00030d40 	.word	0x00030d40

08005c38 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	68f9      	ldr	r1, [r7, #12]
 8005c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b087      	sub	sp, #28
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0306 	and.w	r3, r3, #6
 8005c82:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d002      	beq.n	8005c90 <USB_GetDevSpeed+0x26>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d102      	bne.n	8005c96 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c90:	2302      	movs	r3, #2
 8005c92:	75fb      	strb	r3, [r7, #23]
 8005c94:	e001      	b.n	8005c9a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005c96:	230f      	movs	r3, #15
 8005c98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d13a      	bne.n	8005d3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	68f9      	ldr	r1, [r7, #12]
 8005cde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d155      	bne.n	8005da8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	78db      	ldrb	r3, [r3, #3]
 8005d16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	059b      	lsls	r3, r3, #22
 8005d1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d20:	4313      	orrs	r3, r2
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e036      	b.n	8005da8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d40:	69da      	ldr	r2, [r3, #28]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11a      	bne.n	8005da8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	78db      	ldrb	r3, [r3, #3]
 8005d8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	4313      	orrs	r3, r2
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	785b      	ldrb	r3, [r3, #1]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d161      	bne.n	8005e98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dea:	d11f      	bne.n	8005e2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	2101      	movs	r1, #1
 8005e62:	fa01 f303 	lsl.w	r3, r1, r3
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	68f9      	ldr	r1, [r7, #12]
 8005e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e70:	4013      	ands	r3, r2
 8005e72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	0159      	lsls	r1, r3, #5
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	440b      	add	r3, r1
 8005e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4b35      	ldr	r3, [pc, #212]	; (8005f68 <USB_DeactivateEndpoint+0x1b0>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	600b      	str	r3, [r1, #0]
 8005e96:	e060      	b.n	8005f5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eae:	d11f      	bne.n	8005ef0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ece:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	2101      	movs	r1, #1
 8005f02:	fa01 f303 	lsl.w	r3, r1, r3
 8005f06:	041b      	lsls	r3, r3, #16
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f10:	4013      	ands	r3, r2
 8005f12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	2101      	movs	r1, #1
 8005f26:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f34:	4013      	ands	r3, r2
 8005f36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	0159      	lsls	r1, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	440b      	add	r3, r1
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f52:	4619      	mov	r1, r3
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <USB_DeactivateEndpoint+0x1b4>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	ec337800 	.word	0xec337800
 8005f6c:	eff37800 	.word	0xeff37800

08005f70 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	f040 810a 	bne.w	80061a2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d132      	bne.n	8005ffc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	0151      	lsls	r1, r2, #5
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	440a      	add	r2, r1
 8005fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff4:	0cdb      	lsrs	r3, r3, #19
 8005ff6:	04db      	lsls	r3, r3, #19
 8005ff8:	6113      	str	r3, [r2, #16]
 8005ffa:	e074      	b.n	80060e6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006016:	0cdb      	lsrs	r3, r3, #19
 8006018:	04db      	lsls	r3, r3, #19
 800601a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	440a      	add	r2, r1
 8006032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006036:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800603a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800603e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	691a      	ldr	r2, [r3, #16]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6959      	ldr	r1, [r3, #20]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	440b      	add	r3, r1
 8006058:	1e59      	subs	r1, r3, #1
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006062:	04d9      	lsls	r1, r3, #19
 8006064:	4baf      	ldr	r3, [pc, #700]	; (8006324 <USB_EPStartXfer+0x3b4>)
 8006066:	400b      	ands	r3, r1
 8006068:	6939      	ldr	r1, [r7, #16]
 800606a:	0148      	lsls	r0, r1, #5
 800606c:	6979      	ldr	r1, [r7, #20]
 800606e:	4401      	add	r1, r0
 8006070:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006074:	4313      	orrs	r3, r2
 8006076:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800608e:	6939      	ldr	r1, [r7, #16]
 8006090:	0148      	lsls	r0, r1, #5
 8006092:	6979      	ldr	r1, [r7, #20]
 8006094:	4401      	add	r1, r0
 8006096:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800609a:	4313      	orrs	r3, r2
 800609c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	78db      	ldrb	r3, [r3, #3]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d11f      	bne.n	80060e6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	0151      	lsls	r1, r2, #5
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	440a      	add	r2, r1
 80060bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80060c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060e4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006100:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006104:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	78db      	ldrb	r3, [r3, #3]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d015      	beq.n	800613a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 8100 	beq.w	8006318 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	2101      	movs	r1, #1
 800612a:	fa01 f303 	lsl.w	r3, r1, r3
 800612e:	6979      	ldr	r1, [r7, #20]
 8006130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006134:	4313      	orrs	r3, r2
 8006136:	634b      	str	r3, [r1, #52]	; 0x34
 8006138:	e0ee      	b.n	8006318 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006146:	2b00      	cmp	r3, #0
 8006148:	d110      	bne.n	800616c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e00f      	b.n	800618c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	440a      	add	r2, r1
 8006182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800618a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68d9      	ldr	r1, [r3, #12]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	b29b      	uxth	r3, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9e2 	bl	8006564 <USB_WritePacket>
 80061a0:	e0ba      	b.n	8006318 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061bc:	0cdb      	lsrs	r3, r3, #19
 80061be:	04db      	lsls	r3, r3, #19
 80061c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d123      	bne.n	8006236 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006204:	6939      	ldr	r1, [r7, #16]
 8006206:	0148      	lsls	r0, r1, #5
 8006208:	6979      	ldr	r1, [r7, #20]
 800620a:	4401      	add	r1, r0
 800620c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006210:	4313      	orrs	r3, r2
 8006212:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	440a      	add	r2, r1
 800622a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006232:	6113      	str	r3, [r2, #16]
 8006234:	e033      	b.n	800629e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	4413      	add	r3, r2
 8006240:	1e5a      	subs	r2, r3, #1
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	fbb2 f3f3 	udiv	r3, r2, r3
 800624a:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	89fb      	ldrh	r3, [r7, #14]
 800625c:	04d9      	lsls	r1, r3, #19
 800625e:	4b31      	ldr	r3, [pc, #196]	; (8006324 <USB_EPStartXfer+0x3b4>)
 8006260:	400b      	ands	r3, r1
 8006262:	6939      	ldr	r1, [r7, #16]
 8006264:	0148      	lsls	r0, r1, #5
 8006266:	6979      	ldr	r1, [r7, #20]
 8006268:	4401      	add	r1, r0
 800626a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800626e:	4313      	orrs	r3, r2
 8006270:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	89f9      	ldrh	r1, [r7, #14]
 8006286:	fb01 f303 	mul.w	r3, r1, r3
 800628a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800628e:	6939      	ldr	r1, [r7, #16]
 8006290:	0148      	lsls	r0, r1, #5
 8006292:	6979      	ldr	r1, [r7, #20]
 8006294:	4401      	add	r1, r0
 8006296:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800629a:	4313      	orrs	r3, r2
 800629c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	78db      	ldrb	r3, [r3, #3]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d128      	bne.n	80062f8 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d110      	bne.n	80062d8 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e00f      	b.n	80062f8 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	0151      	lsls	r1, r2, #5
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	440a      	add	r2, r1
 800630e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006312:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	1ff80000 	.word	0x1ff80000

08006328 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	785b      	ldrb	r3, [r3, #1]
 8006340:	2b01      	cmp	r3, #1
 8006342:	f040 80ab 	bne.w	800649c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d132      	bne.n	80063b4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	440a      	add	r2, r1
 8006364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006368:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800636c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006370:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	440a      	add	r2, r1
 8006388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ac:	0cdb      	lsrs	r3, r3, #19
 80063ae:	04db      	lsls	r3, r3, #19
 80063b0:	6113      	str	r3, [r2, #16]
 80063b2:	e04e      	b.n	8006452 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	0151      	lsls	r1, r2, #5
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	440a      	add	r2, r1
 80063ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ce:	0cdb      	lsrs	r3, r3, #19
 80063d0:	04db      	lsls	r3, r3, #19
 80063d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	695a      	ldr	r2, [r3, #20]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	429a      	cmp	r2, r3
 8006402:	d903      	bls.n	800640c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	440a      	add	r2, r1
 8006422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800642a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	0148      	lsls	r0, r1, #5
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	4401      	add	r1, r0
 800644a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800644e:	4313      	orrs	r3, r2
 8006450:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	440a      	add	r2, r1
 8006468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006470:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d06d      	beq.n	8006556 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	2101      	movs	r1, #1
 800648c:	fa01 f303 	lsl.w	r3, r1, r3
 8006490:	68f9      	ldr	r1, [r7, #12]
 8006492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006496:	4313      	orrs	r3, r2
 8006498:	634b      	str	r3, [r1, #52]	; 0x34
 800649a:	e05c      	b.n	8006556 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b6:	0cdb      	lsrs	r3, r3, #19
 80064b8:	04db      	lsls	r3, r3, #19
 80064ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064de:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800650a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800650e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	0148      	lsls	r0, r1, #5
 800652a:	68f9      	ldr	r1, [r7, #12]
 800652c:	4401      	add	r1, r0
 800652e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006532:	4313      	orrs	r3, r2
 8006534:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	440a      	add	r2, r1
 800654c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006550:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006554:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006564:	b480      	push	{r7}
 8006566:	b089      	sub	sp, #36	; 0x24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	4611      	mov	r1, r2
 8006570:	461a      	mov	r2, r3
 8006572:	460b      	mov	r3, r1
 8006574:	71fb      	strb	r3, [r7, #7]
 8006576:	4613      	mov	r3, r2
 8006578:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006582:	88bb      	ldrh	r3, [r7, #4]
 8006584:	3303      	adds	r3, #3
 8006586:	089b      	lsrs	r3, r3, #2
 8006588:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800658a:	2300      	movs	r3, #0
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	e00f      	b.n	80065b0 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	031a      	lsls	r2, r3, #12
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	4413      	add	r3, r2
 8006598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659c:	461a      	mov	r2, r3
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	3304      	adds	r3, #4
 80065a8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	3301      	adds	r3, #1
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d3eb      	bcc.n	8006590 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3724      	adds	r7, #36	; 0x24
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b089      	sub	sp, #36	; 0x24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	4613      	mov	r3, r2
 80065d2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	3303      	adds	r3, #3
 80065e0:	089b      	lsrs	r3, r3, #2
 80065e2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80065e4:	2300      	movs	r3, #0
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e00b      	b.n	8006602 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	601a      	str	r2, [r3, #0]
    pDest++;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	3304      	adds	r3, #4
 80065fa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	3301      	adds	r3, #1
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	429a      	cmp	r2, r3
 8006608:	d3ef      	bcc.n	80065ea <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800660a:	69fb      	ldr	r3, [r7, #28]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3724      	adds	r7, #36	; 0x24
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d12c      	bne.n	800668e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	db12      	blt.n	800666c <USB_EPSetStall+0x54>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00f      	beq.n	800666c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	440a      	add	r2, r1
 8006662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006666:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800666a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	e02b      	b.n	80066e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	db12      	blt.n	80066c6 <USB_EPSetStall+0xae>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00f      	beq.n	80066c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d128      	bne.n	8006762 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800672e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	78db      	ldrb	r3, [r3, #3]
 8006734:	2b03      	cmp	r3, #3
 8006736:	d003      	beq.n	8006740 <USB_EPClearStall+0x4c>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	78db      	ldrb	r3, [r3, #3]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d138      	bne.n	80067b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	0151      	lsls	r1, r2, #5
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	440a      	add	r2, r1
 8006756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	e027      	b.n	80067b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	440a      	add	r2, r1
 8006778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800677c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006780:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	78db      	ldrb	r3, [r3, #3]
 8006786:	2b03      	cmp	r3, #3
 8006788:	d003      	beq.n	8006792 <USB_EPClearStall+0x9e>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	78db      	ldrb	r3, [r3, #3]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d10f      	bne.n	80067b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80067f4:	68f9      	ldr	r1, [r7, #12]
 80067f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067fa:	4313      	orrs	r3, r2
 80067fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006826:	f023 0303 	bic.w	r3, r3, #3
 800682a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800683a:	f023 0302 	bic.w	r3, r3, #2
 800683e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006868:	f023 0303 	bic.w	r3, r3, #3
 800686c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800687c:	f043 0302 	orr.w	r3, r3, #2
 8006880:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4013      	ands	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b085      	sub	sp, #20
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	4013      	ands	r3, r2
 80068d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	0c1b      	lsrs	r3, r3, #16
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b085      	sub	sp, #20
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	4013      	ands	r3, r2
 800690c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	b29b      	uxth	r3, r3
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	4013      	ands	r3, r2
 800694a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800694c:	68bb      	ldr	r3, [r7, #8]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800695a:	b480      	push	{r7}
 800695c:	b087      	sub	sp, #28
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800697e:	78fb      	ldrb	r3, [r7, #3]
 8006980:	f003 030f 	and.w	r3, r3, #15
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	fa22 f303 	lsr.w	r3, r2, r3
 800698a:	01db      	lsls	r3, r3, #7
 800698c:	b2db      	uxtb	r3, r3
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006994:	78fb      	ldrb	r3, [r7, #3]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4013      	ands	r3, r2
 80069a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069a8:	68bb      	ldr	r3, [r7, #8]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0301 	and.w	r3, r3, #1
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069f0:	f023 0307 	bic.w	r3, r3, #7
 80069f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	333c      	adds	r3, #60	; 0x3c
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4a1c      	ldr	r2, [pc, #112]	; (8006aa4 <USB_EP0_OutStart+0x8c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d90a      	bls.n	8006a4e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a48:	d101      	bne.n	8006a4e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e024      	b.n	8006a98 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a54:	461a      	mov	r2, r3
 8006a56:	2300      	movs	r3, #0
 8006a58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7c:	f043 0318 	orr.w	r3, r3, #24
 8006a80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a94:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	4f54300a 	.word	0x4f54300a

08006aa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4a13      	ldr	r2, [pc, #76]	; (8006b0c <USB_CoreReset+0x64>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d901      	bls.n	8006ac6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e01b      	b.n	8006afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	daf2      	bge.n	8006ab4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f043 0201 	orr.w	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <USB_CoreReset+0x64>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d901      	bls.n	8006af0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e006      	b.n	8006afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d0f0      	beq.n	8006ade <USB_CoreReset+0x36>

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	00030d40 	.word	0x00030d40

08006b10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b20:	f002 fa64 	bl	8008fec <USBD_static_malloc>
 8006b24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006b34:	2302      	movs	r3, #2
 8006b36:	e066      	b.n	8006c06 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7c1b      	ldrb	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d119      	bne.n	8006b7c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	2181      	movs	r1, #129	; 0x81
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f002 f885 	bl	8008c60 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b60:	2202      	movs	r2, #2
 8006b62:	2101      	movs	r1, #1
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f002 f87b 	bl	8008c60 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2210      	movs	r2, #16
 8006b76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006b7a:	e016      	b.n	8006baa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b7c:	2340      	movs	r3, #64	; 0x40
 8006b7e:	2202      	movs	r2, #2
 8006b80:	2181      	movs	r1, #129	; 0x81
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f002 f86c 	bl	8008c60 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	2202      	movs	r2, #2
 8006b92:	2101      	movs	r1, #1
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f002 f863 	bl	8008c60 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006baa:	2308      	movs	r3, #8
 8006bac:	2203      	movs	r2, #3
 8006bae:	2182      	movs	r1, #130	; 0x82
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f002 f855 	bl	8008c60 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	7c1b      	ldrb	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d109      	bne.n	8006bf4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bea:	2101      	movs	r1, #1
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f002 f9b1 	bl	8008f54 <USBD_LL_PrepareReceive>
 8006bf2:	e007      	b.n	8006c04 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bfa:	2340      	movs	r3, #64	; 0x40
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 f9a8 	bl	8008f54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c1a:	2181      	movs	r1, #129	; 0x81
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f002 f85d 	bl	8008cdc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c28:	2101      	movs	r1, #1
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f002 f856 	bl	8008cdc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c38:	2182      	movs	r1, #130	; 0x82
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f002 f84e 	bl	8008cdc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f002 f9cc 	bl	8009008 <USBD_static_free>
    pdev->pClassData = NULL;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e0af      	b.n	8006e0c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d03f      	beq.n	8006d38 <USBD_CDC_Setup+0xb4>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	f040 809f 	bne.w	8006dfc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	88db      	ldrh	r3, [r3, #6]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d02e      	beq.n	8006d24 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	b25b      	sxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	da16      	bge.n	8006cfe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006cdc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	88d2      	ldrh	r2, [r2, #6]
 8006ce2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	88db      	ldrh	r3, [r3, #6]
 8006ce8:	2b07      	cmp	r3, #7
 8006cea:	bf28      	it	cs
 8006cec:	2307      	movcs	r3, #7
 8006cee:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	89fa      	ldrh	r2, [r7, #14]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 fb19 	bl	800832e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006cfc:	e085      	b.n	8006e0a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	785a      	ldrb	r2, [r3, #1]
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	88db      	ldrh	r3, [r3, #6]
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d14:	6939      	ldr	r1, [r7, #16]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	88db      	ldrh	r3, [r3, #6]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 fb32 	bl	8008386 <USBD_CtlPrepareRx>
      break;
 8006d22:	e072      	b.n	8006e0a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	7850      	ldrb	r0, [r2, #1]
 8006d30:	2200      	movs	r2, #0
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	4798      	blx	r3
      break;
 8006d36:	e068      	b.n	8006e0a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b0b      	cmp	r3, #11
 8006d3e:	d852      	bhi.n	8006de6 <USBD_CDC_Setup+0x162>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <USBD_CDC_Setup+0xc4>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d79 	.word	0x08006d79
 8006d4c:	08006df5 	.word	0x08006df5
 8006d50:	08006de7 	.word	0x08006de7
 8006d54:	08006de7 	.word	0x08006de7
 8006d58:	08006de7 	.word	0x08006de7
 8006d5c:	08006de7 	.word	0x08006de7
 8006d60:	08006de7 	.word	0x08006de7
 8006d64:	08006de7 	.word	0x08006de7
 8006d68:	08006de7 	.word	0x08006de7
 8006d6c:	08006de7 	.word	0x08006de7
 8006d70:	08006da3 	.word	0x08006da3
 8006d74:	08006dcd 	.word	0x08006dcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d107      	bne.n	8006d94 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d84:	f107 030a 	add.w	r3, r7, #10
 8006d88:	2202      	movs	r2, #2
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 face 	bl	800832e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d92:	e032      	b.n	8006dfa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fa58 	bl	800824c <USBD_CtlError>
            ret = USBD_FAIL;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	75fb      	strb	r3, [r7, #23]
          break;
 8006da0:	e02b      	b.n	8006dfa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d107      	bne.n	8006dbe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dae:	f107 030d 	add.w	r3, r7, #13
 8006db2:	2201      	movs	r2, #1
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fab9 	bl	800832e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dbc:	e01d      	b.n	8006dfa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fa43 	bl	800824c <USBD_CtlError>
            ret = USBD_FAIL;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dca:	e016      	b.n	8006dfa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d00f      	beq.n	8006df8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fa36 	bl	800824c <USBD_CtlError>
            ret = USBD_FAIL;
 8006de0:	2303      	movs	r3, #3
 8006de2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006de4:	e008      	b.n	8006df8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fa2f 	bl	800824c <USBD_CtlError>
          ret = USBD_FAIL;
 8006dee:	2303      	movs	r3, #3
 8006df0:	75fb      	strb	r3, [r7, #23]
          break;
 8006df2:	e002      	b.n	8006dfa <USBD_CDC_Setup+0x176>
          break;
 8006df4:	bf00      	nop
 8006df6:	e008      	b.n	8006e0a <USBD_CDC_Setup+0x186>
          break;
 8006df8:	bf00      	nop
      }
      break;
 8006dfa:	e006      	b.n	8006e0a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fa24 	bl	800824c <USBD_CtlError>
      ret = USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	75fb      	strb	r3, [r7, #23]
      break;
 8006e08:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e04f      	b.n	8006ed6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e3e:	78fa      	ldrb	r2, [r7, #3]
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	440b      	add	r3, r1
 8006e4c:	3318      	adds	r3, #24
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d029      	beq.n	8006ea8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e54:	78fa      	ldrb	r2, [r7, #3]
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	3318      	adds	r3, #24
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	78f9      	ldrb	r1, [r7, #3]
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	1a5b      	subs	r3, r3, r1
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4403      	add	r3, r0
 8006e74:	3344      	adds	r3, #68	; 0x44
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e7c:	fb03 f301 	mul.w	r3, r3, r1
 8006e80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d110      	bne.n	8006ea8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006e86:	78fa      	ldrb	r2, [r7, #3]
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	3318      	adds	r3, #24
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e9a:	78f9      	ldrb	r1, [r7, #3]
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f002 f81f 	bl	8008ee4 <USBD_LL_Transmit>
 8006ea6:	e015      	b.n	8006ed4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ed0:	78fa      	ldrb	r2, [r7, #3]
 8006ed2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e015      	b.n	8006f2c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f002 f85d 	bl	8008fc4 <USBD_LL_GetRxDataSize>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f26:	4611      	mov	r1, r2
 8006f28:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e01b      	b.n	8006f86 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d015      	beq.n	8006f84 <USBD_CDC_EP0_RxReady+0x50>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f5e:	2bff      	cmp	r3, #255	; 0xff
 8006f60:	d010      	beq.n	8006f84 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006f70:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f78:	b292      	uxth	r2, r2
 8006f7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	22ff      	movs	r2, #255	; 0xff
 8006f80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2243      	movs	r2, #67	; 0x43
 8006f9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006f9e:	4b03      	ldr	r3, [pc, #12]	; (8006fac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	2000010c 	.word	0x2000010c

08006fb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2243      	movs	r2, #67	; 0x43
 8006fbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006fbe:	4b03      	ldr	r3, [pc, #12]	; (8006fcc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	200000c8 	.word	0x200000c8

08006fd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2243      	movs	r2, #67	; 0x43
 8006fdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006fde:	4b03      	ldr	r3, [pc, #12]	; (8006fec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	20000150 	.word	0x20000150

08006ff0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	220a      	movs	r2, #10
 8006ffc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006ffe:	4b03      	ldr	r3, [pc, #12]	; (800700c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	20000084 	.word	0x20000084

08007010 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007020:	2303      	movs	r3, #3
 8007022:	e004      	b.n	800702e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800703a:	b480      	push	{r7}
 800703c:	b087      	sub	sp, #28
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800704c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007054:	2303      	movs	r3, #3
 8007056:	e008      	b.n	800706a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007086:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800708e:	2303      	movs	r3, #3
 8007090:	e004      	b.n	800709c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070b6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e01a      	b.n	8007100 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d114      	bne.n	80070fe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80070f2:	2181      	movs	r1, #129	; 0x81
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 fef5 	bl	8008ee4 <USBD_LL_Transmit>

    ret = USBD_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007116:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007122:	2303      	movs	r3, #3
 8007124:	e016      	b.n	8007154 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	7c1b      	ldrb	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007138:	2101      	movs	r1, #1
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 ff0a 	bl	8008f54 <USBD_LL_PrepareReceive>
 8007140:	e007      	b.n	8007152 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007148:	2340      	movs	r3, #64	; 0x40
 800714a:	2101      	movs	r1, #1
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 ff01 	bl	8008f54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007170:	2303      	movs	r3, #3
 8007172:	e01f      	b.n	80071b4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	79fa      	ldrb	r2, [r7, #7]
 80071a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f001 fcdd 	bl	8008b68 <USBD_LL_Init>
 80071ae:	4603      	mov	r3, r0
 80071b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e016      	b.n	8007202 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	f107 020e 	add.w	r2, r7, #14
 80071f4:	4610      	mov	r0, r2
 80071f6:	4798      	blx	r3
 80071f8:	4602      	mov	r2, r0
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b082      	sub	sp, #8
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 fcf2 	bl	8008bfc <USBD_LL_Start>
 8007218:	4603      	mov	r3, r0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007244:	2303      	movs	r3, #3
 8007246:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	78fa      	ldrb	r2, [r7, #3]
 800725c:	4611      	mov	r1, r2
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
 8007262:	4603      	mov	r3, r0
 8007264:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007266:	7bfb      	ldrb	r3, [r7, #15]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	78fa      	ldrb	r2, [r7, #3]
 8007290:	4611      	mov	r1, r2
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	4798      	blx	r3
  }

  return USBD_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 ff90 	bl	80081d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d01a      	beq.n	8007312 <USBD_LL_SetupStage+0x72>
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d822      	bhi.n	8007326 <USBD_LL_SetupStage+0x86>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <USBD_LL_SetupStage+0x4a>
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d00a      	beq.n	80072fe <USBD_LL_SetupStage+0x5e>
 80072e8:	e01d      	b.n	8007326 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa62 	bl	80077bc <USBD_StdDevReq>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73fb      	strb	r3, [r7, #15]
      break;
 80072fc:	e020      	b.n	8007340 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fac6 	bl	8007898 <USBD_StdItfReq>
 800730c:	4603      	mov	r3, r0
 800730e:	73fb      	strb	r3, [r7, #15]
      break;
 8007310:	e016      	b.n	8007340 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fb05 	bl	800792a <USBD_StdEPReq>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
      break;
 8007324:	e00c      	b.n	8007340 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800732c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007330:	b2db      	uxtb	r3, r3
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f001 fd07 	bl	8008d48 <USBD_LL_StallEP>
 800733a:	4603      	mov	r3, r0
 800733c:	73fb      	strb	r3, [r7, #15]
      break;
 800733e:	bf00      	nop
  }

  return ret;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b086      	sub	sp, #24
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	460b      	mov	r3, r1
 8007354:	607a      	str	r2, [r7, #4]
 8007356:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d138      	bne.n	80073d0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007364:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800736c:	2b03      	cmp	r3, #3
 800736e:	d14a      	bne.n	8007406 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	429a      	cmp	r2, r3
 800737a:	d913      	bls.n	80073a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	1ad2      	subs	r2, r2, r3
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	4293      	cmp	r3, r2
 8007394:	bf28      	it	cs
 8007396:	4613      	movcs	r3, r2
 8007398:	461a      	mov	r2, r3
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f001 f80f 	bl	80083c0 <USBD_CtlContinueRx>
 80073a2:	e030      	b.n	8007406 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d10b      	bne.n	80073c8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f001 f80a 	bl	80083e2 <USBD_CtlSendStatus>
 80073ce:	e01a      	b.n	8007406 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d114      	bne.n	8007406 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	7afa      	ldrb	r2, [r7, #11]
 80073f2:	4611      	mov	r1, r2
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	4798      	blx	r3
 80073f8:	4603      	mov	r3, r0
 80073fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	e000      	b.n	8007408 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	460b      	mov	r3, r1
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d16b      	bne.n	80074fc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3314      	adds	r3, #20
 8007428:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007430:	2b02      	cmp	r3, #2
 8007432:	d156      	bne.n	80074e2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	429a      	cmp	r2, r3
 800743e:	d914      	bls.n	800746a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	1ad2      	subs	r2, r2, r3
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	461a      	mov	r2, r3
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 ff84 	bl	8008364 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800745c:	2300      	movs	r3, #0
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f001 fd76 	bl	8008f54 <USBD_LL_PrepareReceive>
 8007468:	e03b      	b.n	80074e2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	429a      	cmp	r2, r3
 8007474:	d11c      	bne.n	80074b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800747e:	429a      	cmp	r2, r3
 8007480:	d316      	bcc.n	80074b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800748c:	429a      	cmp	r2, r3
 800748e:	d20f      	bcs.n	80074b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007490:	2200      	movs	r2, #0
 8007492:	2100      	movs	r1, #0
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 ff65 	bl	8008364 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074a2:	2300      	movs	r3, #0
 80074a4:	2200      	movs	r2, #0
 80074a6:	2100      	movs	r1, #0
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f001 fd53 	bl	8008f54 <USBD_LL_PrepareReceive>
 80074ae:	e018      	b.n	80074e2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d10b      	bne.n	80074d4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074d4:	2180      	movs	r1, #128	; 0x80
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f001 fc36 	bl	8008d48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 ff93 	bl	8008408 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d122      	bne.n	8007532 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f7ff fe98 	bl	8007222 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074fa:	e01a      	b.n	8007532 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b03      	cmp	r3, #3
 8007506:	d114      	bne.n	8007532 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00e      	beq.n	8007532 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	7afa      	ldrb	r2, [r7, #11]
 800751e:	4611      	mov	r1, r2
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	4798      	blx	r3
 8007524:	4603      	mov	r3, r0
 8007526:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	e000      	b.n	8007534 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800756c:	2303      	movs	r3, #3
 800756e:	e02f      	b.n	80075d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00f      	beq.n	800759a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6852      	ldr	r2, [r2, #4]
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	4611      	mov	r1, r2
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800759a:	2340      	movs	r3, #64	; 0x40
 800759c:	2200      	movs	r2, #0
 800759e:	2100      	movs	r1, #0
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 fb5d 	bl	8008c60 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2240      	movs	r2, #64	; 0x40
 80075b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075b6:	2340      	movs	r3, #64	; 0x40
 80075b8:	2200      	movs	r2, #0
 80075ba:	2180      	movs	r1, #128	; 0x80
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 fb4f 	bl	8008c60 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2240      	movs	r2, #64	; 0x40
 80075cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	78fa      	ldrb	r2, [r7, #3]
 80075e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007606:	b2da      	uxtb	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2204      	movs	r2, #4
 8007612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b04      	cmp	r3, #4
 8007636:	d106      	bne.n	8007646 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800763e:	b2da      	uxtb	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007666:	2303      	movs	r3, #3
 8007668:	e012      	b.n	8007690 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b03      	cmp	r3, #3
 8007674:	d10b      	bne.n	800768e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e014      	b.n	80076dc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d10d      	bne.n	80076da <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	78fa      	ldrb	r2, [r7, #3]
 80076d4:	4611      	mov	r1, r2
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e014      	b.n	8007728 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b03      	cmp	r3, #3
 8007708:	d10d      	bne.n	8007726 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	d007      	beq.n	8007726 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	4611      	mov	r1, r2
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775c:	2b00      	cmp	r3, #0
 800775e:	d009      	beq.n	8007774 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6852      	ldr	r2, [r2, #4]
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	4611      	mov	r1, r2
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	4798      	blx	r3
  }

  return USBD_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800777e:	b480      	push	{r7}
 8007780:	b087      	sub	sp, #28
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	3301      	adds	r3, #1
 8007794:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800779c:	8a3b      	ldrh	r3, [r7, #16]
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	b21a      	sxth	r2, r3
 80077a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	b21b      	sxth	r3, r3
 80077aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077ac:	89fb      	ldrh	r3, [r7, #14]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
	...

080077bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d005      	beq.n	80077e2 <USBD_StdDevReq+0x26>
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d853      	bhi.n	8007882 <USBD_StdDevReq+0xc6>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00b      	beq.n	80077f6 <USBD_StdDevReq+0x3a>
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d14f      	bne.n	8007882 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	4798      	blx	r3
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]
      break;
 80077f4:	e04a      	b.n	800788c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	785b      	ldrb	r3, [r3, #1]
 80077fa:	2b09      	cmp	r3, #9
 80077fc:	d83b      	bhi.n	8007876 <USBD_StdDevReq+0xba>
 80077fe:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <USBD_StdDevReq+0x48>)
 8007800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007804:	08007859 	.word	0x08007859
 8007808:	0800786d 	.word	0x0800786d
 800780c:	08007877 	.word	0x08007877
 8007810:	08007863 	.word	0x08007863
 8007814:	08007877 	.word	0x08007877
 8007818:	08007837 	.word	0x08007837
 800781c:	0800782d 	.word	0x0800782d
 8007820:	08007877 	.word	0x08007877
 8007824:	0800784f 	.word	0x0800784f
 8007828:	08007841 	.word	0x08007841
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f9de 	bl	8007bf0 <USBD_GetDescriptor>
          break;
 8007834:	e024      	b.n	8007880 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fb43 	bl	8007ec4 <USBD_SetAddress>
          break;
 800783e:	e01f      	b.n	8007880 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fb82 	bl	8007f4c <USBD_SetConfig>
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]
          break;
 800784c:	e018      	b.n	8007880 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fc21 	bl	8008098 <USBD_GetConfig>
          break;
 8007856:	e013      	b.n	8007880 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fc52 	bl	8008104 <USBD_GetStatus>
          break;
 8007860:	e00e      	b.n	8007880 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fc81 	bl	800816c <USBD_SetFeature>
          break;
 800786a:	e009      	b.n	8007880 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fc90 	bl	8008194 <USBD_ClrFeature>
          break;
 8007874:	e004      	b.n	8007880 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fce7 	bl	800824c <USBD_CtlError>
          break;
 800787e:	bf00      	nop
      }
      break;
 8007880:	e004      	b.n	800788c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fce1 	bl	800824c <USBD_CtlError>
      break;
 800788a:	bf00      	nop
  }

  return ret;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop

08007898 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ae:	2b40      	cmp	r3, #64	; 0x40
 80078b0:	d005      	beq.n	80078be <USBD_StdItfReq+0x26>
 80078b2:	2b40      	cmp	r3, #64	; 0x40
 80078b4:	d82f      	bhi.n	8007916 <USBD_StdItfReq+0x7e>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <USBD_StdItfReq+0x26>
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d12b      	bne.n	8007916 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d81d      	bhi.n	8007908 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	889b      	ldrh	r3, [r3, #4]
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d813      	bhi.n	80078fe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4798      	blx	r3
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	88db      	ldrh	r3, [r3, #6]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d110      	bne.n	8007912 <USBD_StdItfReq+0x7a>
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10d      	bne.n	8007912 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fd73 	bl	80083e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078fc:	e009      	b.n	8007912 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fca3 	bl	800824c <USBD_CtlError>
          break;
 8007906:	e004      	b.n	8007912 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fc9e 	bl	800824c <USBD_CtlError>
          break;
 8007910:	e000      	b.n	8007914 <USBD_StdItfReq+0x7c>
          break;
 8007912:	bf00      	nop
      }
      break;
 8007914:	e004      	b.n	8007920 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc97 	bl	800824c <USBD_CtlError>
      break;
 800791e:	bf00      	nop
  }

  return ret;
 8007920:	7bfb      	ldrb	r3, [r7, #15]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b084      	sub	sp, #16
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	889b      	ldrh	r3, [r3, #4]
 800793c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007946:	2b40      	cmp	r3, #64	; 0x40
 8007948:	d007      	beq.n	800795a <USBD_StdEPReq+0x30>
 800794a:	2b40      	cmp	r3, #64	; 0x40
 800794c:	f200 8145 	bhi.w	8007bda <USBD_StdEPReq+0x2b0>
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00c      	beq.n	800796e <USBD_StdEPReq+0x44>
 8007954:	2b20      	cmp	r3, #32
 8007956:	f040 8140 	bne.w	8007bda <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	4798      	blx	r3
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
      break;
 800796c:	e13a      	b.n	8007be4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	785b      	ldrb	r3, [r3, #1]
 8007972:	2b03      	cmp	r3, #3
 8007974:	d007      	beq.n	8007986 <USBD_StdEPReq+0x5c>
 8007976:	2b03      	cmp	r3, #3
 8007978:	f300 8129 	bgt.w	8007bce <USBD_StdEPReq+0x2a4>
 800797c:	2b00      	cmp	r3, #0
 800797e:	d07f      	beq.n	8007a80 <USBD_StdEPReq+0x156>
 8007980:	2b01      	cmp	r3, #1
 8007982:	d03c      	beq.n	80079fe <USBD_StdEPReq+0xd4>
 8007984:	e123      	b.n	8007bce <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d002      	beq.n	8007998 <USBD_StdEPReq+0x6e>
 8007992:	2b03      	cmp	r3, #3
 8007994:	d016      	beq.n	80079c4 <USBD_StdEPReq+0x9a>
 8007996:	e02c      	b.n	80079f2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00d      	beq.n	80079ba <USBD_StdEPReq+0x90>
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b80      	cmp	r3, #128	; 0x80
 80079a2:	d00a      	beq.n	80079ba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 f9cd 	bl	8008d48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ae:	2180      	movs	r1, #128	; 0x80
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 f9c9 	bl	8008d48 <USBD_LL_StallEP>
 80079b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079b8:	e020      	b.n	80079fc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fc45 	bl	800824c <USBD_CtlError>
              break;
 80079c2:	e01b      	b.n	80079fc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	885b      	ldrh	r3, [r3, #2]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10e      	bne.n	80079ea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00b      	beq.n	80079ea <USBD_StdEPReq+0xc0>
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b80      	cmp	r3, #128	; 0x80
 80079d6:	d008      	beq.n	80079ea <USBD_StdEPReq+0xc0>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	88db      	ldrh	r3, [r3, #6]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f9af 	bl	8008d48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fcf9 	bl	80083e2 <USBD_CtlSendStatus>

              break;
 80079f0:	e004      	b.n	80079fc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fc29 	bl	800824c <USBD_CtlError>
              break;
 80079fa:	bf00      	nop
          }
          break;
 80079fc:	e0ec      	b.n	8007bd8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d002      	beq.n	8007a10 <USBD_StdEPReq+0xe6>
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d016      	beq.n	8007a3c <USBD_StdEPReq+0x112>
 8007a0e:	e030      	b.n	8007a72 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00d      	beq.n	8007a32 <USBD_StdEPReq+0x108>
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b80      	cmp	r3, #128	; 0x80
 8007a1a:	d00a      	beq.n	8007a32 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 f991 	bl	8008d48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a26:	2180      	movs	r1, #128	; 0x80
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f001 f98d 	bl	8008d48 <USBD_LL_StallEP>
 8007a2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a30:	e025      	b.n	8007a7e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fc09 	bl	800824c <USBD_CtlError>
              break;
 8007a3a:	e020      	b.n	8007a7e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	885b      	ldrh	r3, [r3, #2]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11b      	bne.n	8007a7c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d004      	beq.n	8007a58 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 f9ae 	bl	8008db4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fcc2 	bl	80083e2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4798      	blx	r3
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007a70:	e004      	b.n	8007a7c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fbe9 	bl	800824c <USBD_CtlError>
              break;
 8007a7a:	e000      	b.n	8007a7e <USBD_StdEPReq+0x154>
              break;
 8007a7c:	bf00      	nop
          }
          break;
 8007a7e:	e0ab      	b.n	8007bd8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d002      	beq.n	8007a92 <USBD_StdEPReq+0x168>
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d032      	beq.n	8007af6 <USBD_StdEPReq+0x1cc>
 8007a90:	e097      	b.n	8007bc2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d007      	beq.n	8007aa8 <USBD_StdEPReq+0x17e>
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b80      	cmp	r3, #128	; 0x80
 8007a9c:	d004      	beq.n	8007aa8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fbd3 	bl	800824c <USBD_CtlError>
                break;
 8007aa6:	e091      	b.n	8007bcc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	da0b      	bge.n	8007ac8 <USBD_StdEPReq+0x19e>
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	3310      	adds	r3, #16
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	e00b      	b.n	8007ae0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	4413      	add	r3, r2
 8007ade:	3304      	adds	r3, #4
 8007ae0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2202      	movs	r2, #2
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fc1d 	bl	800832e <USBD_CtlSendData>
              break;
 8007af4:	e06a      	b.n	8007bcc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007af6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da11      	bge.n	8007b22 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	3324      	adds	r3, #36	; 0x24
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d117      	bne.n	8007b48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fb96 	bl	800824c <USBD_CtlError>
                  break;
 8007b20:	e054      	b.n	8007bcc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	f003 020f 	and.w	r2, r3, #15
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	440b      	add	r3, r1
 8007b34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d104      	bne.n	8007b48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fb83 	bl	800824c <USBD_CtlError>
                  break;
 8007b46:	e041      	b.n	8007bcc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	da0b      	bge.n	8007b68 <USBD_StdEPReq+0x23e>
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	3310      	adds	r3, #16
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	4413      	add	r3, r2
 8007b64:	3304      	adds	r3, #4
 8007b66:	e00b      	b.n	8007b80 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	3304      	adds	r3, #4
 8007b80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <USBD_StdEPReq+0x264>
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b80      	cmp	r3, #128	; 0x80
 8007b8c:	d103      	bne.n	8007b96 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	e00e      	b.n	8007bb4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 f940 	bl	8008e20 <USBD_LL_IsStallEP>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	e002      	b.n	8007bb4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fbb7 	bl	800832e <USBD_CtlSendData>
              break;
 8007bc0:	e004      	b.n	8007bcc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fb41 	bl	800824c <USBD_CtlError>
              break;
 8007bca:	bf00      	nop
          }
          break;
 8007bcc:	e004      	b.n	8007bd8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fb3b 	bl	800824c <USBD_CtlError>
          break;
 8007bd6:	bf00      	nop
      }
      break;
 8007bd8:	e004      	b.n	8007be4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fb35 	bl	800824c <USBD_CtlError>
      break;
 8007be2:	bf00      	nop
  }

  return ret;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
	...

08007bf0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	885b      	ldrh	r3, [r3, #2]
 8007c0a:	0a1b      	lsrs	r3, r3, #8
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	2b06      	cmp	r3, #6
 8007c12:	f200 8128 	bhi.w	8007e66 <USBD_GetDescriptor+0x276>
 8007c16:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <USBD_GetDescriptor+0x2c>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	08007c51 	.word	0x08007c51
 8007c24:	08007c91 	.word	0x08007c91
 8007c28:	08007e67 	.word	0x08007e67
 8007c2c:	08007e67 	.word	0x08007e67
 8007c30:	08007e07 	.word	0x08007e07
 8007c34:	08007e33 	.word	0x08007e33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	7c12      	ldrb	r2, [r2, #16]
 8007c44:	f107 0108 	add.w	r1, r7, #8
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	60f8      	str	r0, [r7, #12]
      break;
 8007c4e:	e112      	b.n	8007e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	7c1b      	ldrb	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10d      	bne.n	8007c74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c60:	f107 0208 	add.w	r2, r7, #8
 8007c64:	4610      	mov	r0, r2
 8007c66:	4798      	blx	r3
 8007c68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	2202      	movs	r2, #2
 8007c70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c72:	e100      	b.n	8007e76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	f107 0208 	add.w	r2, r7, #8
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	701a      	strb	r2, [r3, #0]
      break;
 8007c8e:	e0f2      	b.n	8007e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	885b      	ldrh	r3, [r3, #2]
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b05      	cmp	r3, #5
 8007c98:	f200 80ac 	bhi.w	8007df4 <USBD_GetDescriptor+0x204>
 8007c9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <USBD_GetDescriptor+0xb4>)
 8007c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca2:	bf00      	nop
 8007ca4:	08007cbd 	.word	0x08007cbd
 8007ca8:	08007cf1 	.word	0x08007cf1
 8007cac:	08007d25 	.word	0x08007d25
 8007cb0:	08007d59 	.word	0x08007d59
 8007cb4:	08007d8d 	.word	0x08007d8d
 8007cb8:	08007dc1 	.word	0x08007dc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cde:	e091      	b.n	8007e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fab2 	bl	800824c <USBD_CtlError>
            err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
          break;
 8007cee:	e089      	b.n	8007e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	7c12      	ldrb	r2, [r2, #16]
 8007d08:	f107 0108 	add.w	r1, r7, #8
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d12:	e077      	b.n	8007e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa98 	bl	800824c <USBD_CtlError>
            err++;
 8007d1c:	7afb      	ldrb	r3, [r7, #11]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	72fb      	strb	r3, [r7, #11]
          break;
 8007d22:	e06f      	b.n	8007e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00b      	beq.n	8007d48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	7c12      	ldrb	r2, [r2, #16]
 8007d3c:	f107 0108 	add.w	r1, r7, #8
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
 8007d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d46:	e05d      	b.n	8007e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa7e 	bl	800824c <USBD_CtlError>
            err++;
 8007d50:	7afb      	ldrb	r3, [r7, #11]
 8007d52:	3301      	adds	r3, #1
 8007d54:	72fb      	strb	r3, [r7, #11]
          break;
 8007d56:	e055      	b.n	8007e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	7c12      	ldrb	r2, [r2, #16]
 8007d70:	f107 0108 	add.w	r1, r7, #8
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7a:	e043      	b.n	8007e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa64 	bl	800824c <USBD_CtlError>
            err++;
 8007d84:	7afb      	ldrb	r3, [r7, #11]
 8007d86:	3301      	adds	r3, #1
 8007d88:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8a:	e03b      	b.n	8007e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00b      	beq.n	8007db0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	7c12      	ldrb	r2, [r2, #16]
 8007da4:	f107 0108 	add.w	r1, r7, #8
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dae:	e029      	b.n	8007e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa4a 	bl	800824c <USBD_CtlError>
            err++;
 8007db8:	7afb      	ldrb	r3, [r7, #11]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dbe:	e021      	b.n	8007e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	7c12      	ldrb	r2, [r2, #16]
 8007dd8:	f107 0108 	add.w	r1, r7, #8
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de2:	e00f      	b.n	8007e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa30 	bl	800824c <USBD_CtlError>
            err++;
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	3301      	adds	r3, #1
 8007df0:	72fb      	strb	r3, [r7, #11]
          break;
 8007df2:	e007      	b.n	8007e04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa28 	bl	800824c <USBD_CtlError>
          err++;
 8007dfc:	7afb      	ldrb	r3, [r7, #11]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007e02:	bf00      	nop
      }
      break;
 8007e04:	e037      	b.n	8007e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7c1b      	ldrb	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e16:	f107 0208 	add.w	r2, r7, #8
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	4798      	blx	r3
 8007e1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e20:	e029      	b.n	8007e76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fa11 	bl	800824c <USBD_CtlError>
        err++;
 8007e2a:	7afb      	ldrb	r3, [r7, #11]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e30:	e021      	b.n	8007e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	7c1b      	ldrb	r3, [r3, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10d      	bne.n	8007e56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	f107 0208 	add.w	r2, r7, #8
 8007e46:	4610      	mov	r0, r2
 8007e48:	4798      	blx	r3
 8007e4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	2207      	movs	r2, #7
 8007e52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e54:	e00f      	b.n	8007e76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f9f7 	bl	800824c <USBD_CtlError>
        err++;
 8007e5e:	7afb      	ldrb	r3, [r7, #11]
 8007e60:	3301      	adds	r3, #1
 8007e62:	72fb      	strb	r3, [r7, #11]
      break;
 8007e64:	e007      	b.n	8007e76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f9ef 	bl	800824c <USBD_CtlError>
      err++;
 8007e6e:	7afb      	ldrb	r3, [r7, #11]
 8007e70:	3301      	adds	r3, #1
 8007e72:	72fb      	strb	r3, [r7, #11]
      break;
 8007e74:	bf00      	nop
  }

  if (err != 0U)
 8007e76:	7afb      	ldrb	r3, [r7, #11]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d11e      	bne.n	8007eba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	88db      	ldrh	r3, [r3, #6]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d016      	beq.n	8007eb2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e84:	893b      	ldrh	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00e      	beq.n	8007ea8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	88da      	ldrh	r2, [r3, #6]
 8007e8e:	893b      	ldrh	r3, [r7, #8]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	bf28      	it	cs
 8007e94:	4613      	movcs	r3, r2
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e9a:	893b      	ldrh	r3, [r7, #8]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fa44 	bl	800832e <USBD_CtlSendData>
 8007ea6:	e009      	b.n	8007ebc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f9ce 	bl	800824c <USBD_CtlError>
 8007eb0:	e004      	b.n	8007ebc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa95 	bl	80083e2 <USBD_CtlSendStatus>
 8007eb8:	e000      	b.n	8007ebc <USBD_GetDescriptor+0x2cc>
    return;
 8007eba:	bf00      	nop
  }
}
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop

08007ec4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	889b      	ldrh	r3, [r3, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d131      	bne.n	8007f3a <USBD_SetAddress+0x76>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	88db      	ldrh	r3, [r3, #6]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d12d      	bne.n	8007f3a <USBD_SetAddress+0x76>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	885b      	ldrh	r3, [r3, #2]
 8007ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ee4:	d829      	bhi.n	8007f3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	885b      	ldrh	r3, [r3, #2]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ef0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d104      	bne.n	8007f08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f9a3 	bl	800824c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f06:	e01d      	b.n	8007f44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7bfa      	ldrb	r2, [r7, #15]
 8007f0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 ffaf 	bl	8008e78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fa61 	bl	80083e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d004      	beq.n	8007f30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2202      	movs	r2, #2
 8007f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2e:	e009      	b.n	8007f44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f38:	e004      	b.n	8007f44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f985 	bl	800824c <USBD_CtlError>
  }
}
 8007f42:	bf00      	nop
 8007f44:	bf00      	nop
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	885b      	ldrh	r3, [r3, #2]
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	4b4c      	ldr	r3, [pc, #304]	; (8008094 <USBD_SetConfig+0x148>)
 8007f62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f64:	4b4b      	ldr	r3, [pc, #300]	; (8008094 <USBD_SetConfig+0x148>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d905      	bls.n	8007f78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f96c 	bl	800824c <USBD_CtlError>
    return USBD_FAIL;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e088      	b.n	800808a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d002      	beq.n	8007f8a <USBD_SetConfig+0x3e>
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d025      	beq.n	8007fd4 <USBD_SetConfig+0x88>
 8007f88:	e071      	b.n	800806e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f8a:	4b42      	ldr	r3, [pc, #264]	; (8008094 <USBD_SetConfig+0x148>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d01c      	beq.n	8007fcc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007f92:	4b40      	ldr	r3, [pc, #256]	; (8008094 <USBD_SetConfig+0x148>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f9c:	4b3d      	ldr	r3, [pc, #244]	; (8008094 <USBD_SetConfig+0x148>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff f948 	bl	8007238 <USBD_SetClassConfig>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f949 	bl	800824c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fba:	e065      	b.n	8008088 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fa10 	bl	80083e2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2203      	movs	r2, #3
 8007fc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007fca:	e05d      	b.n	8008088 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fa08 	bl	80083e2 <USBD_CtlSendStatus>
      break;
 8007fd2:	e059      	b.n	8008088 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fd4:	4b2f      	ldr	r3, [pc, #188]	; (8008094 <USBD_SetConfig+0x148>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d112      	bne.n	8008002 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007fe4:	4b2b      	ldr	r3, [pc, #172]	; (8008094 <USBD_SetConfig+0x148>)
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fee:	4b29      	ldr	r3, [pc, #164]	; (8008094 <USBD_SetConfig+0x148>)
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff f93b 	bl	8007270 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f9f1 	bl	80083e2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008000:	e042      	b.n	8008088 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008002:	4b24      	ldr	r3, [pc, #144]	; (8008094 <USBD_SetConfig+0x148>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	429a      	cmp	r2, r3
 800800e:	d02a      	beq.n	8008066 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	b2db      	uxtb	r3, r3
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7ff f929 	bl	8007270 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800801e:	4b1d      	ldr	r3, [pc, #116]	; (8008094 <USBD_SetConfig+0x148>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008028:	4b1a      	ldr	r3, [pc, #104]	; (8008094 <USBD_SetConfig+0x148>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff f902 	bl	8007238 <USBD_SetClassConfig>
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00f      	beq.n	800805e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f903 	bl	800824c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	b2db      	uxtb	r3, r3
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff f90e 	bl	8007270 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800805c:	e014      	b.n	8008088 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f9bf 	bl	80083e2 <USBD_CtlSendStatus>
      break;
 8008064:	e010      	b.n	8008088 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f9bb 	bl	80083e2 <USBD_CtlSendStatus>
      break;
 800806c:	e00c      	b.n	8008088 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f8eb 	bl	800824c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008076:	4b07      	ldr	r3, [pc, #28]	; (8008094 <USBD_SetConfig+0x148>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff f8f7 	bl	8007270 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008082:	2303      	movs	r3, #3
 8008084:	73fb      	strb	r3, [r7, #15]
      break;
 8008086:	bf00      	nop
  }

  return ret;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20000226 	.word	0x20000226

08008098 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	88db      	ldrh	r3, [r3, #6]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d004      	beq.n	80080b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f8cd 	bl	800824c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080b2:	e023      	b.n	80080fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	dc02      	bgt.n	80080c6 <USBD_GetConfig+0x2e>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	dc03      	bgt.n	80080cc <USBD_GetConfig+0x34>
 80080c4:	e015      	b.n	80080f2 <USBD_GetConfig+0x5a>
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d00b      	beq.n	80080e2 <USBD_GetConfig+0x4a>
 80080ca:	e012      	b.n	80080f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3308      	adds	r3, #8
 80080d6:	2201      	movs	r2, #1
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f927 	bl	800832e <USBD_CtlSendData>
        break;
 80080e0:	e00c      	b.n	80080fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3304      	adds	r3, #4
 80080e6:	2201      	movs	r2, #1
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f91f 	bl	800832e <USBD_CtlSendData>
        break;
 80080f0:	e004      	b.n	80080fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f8a9 	bl	800824c <USBD_CtlError>
        break;
 80080fa:	bf00      	nop
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008114:	b2db      	uxtb	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	2b02      	cmp	r3, #2
 800811a:	d81e      	bhi.n	800815a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	88db      	ldrh	r3, [r3, #6]
 8008120:	2b02      	cmp	r3, #2
 8008122:	d004      	beq.n	800812e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f890 	bl	800824c <USBD_CtlError>
        break;
 800812c:	e01a      	b.n	8008164 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800813a:	2b00      	cmp	r3, #0
 800813c:	d005      	beq.n	800814a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f043 0202 	orr.w	r2, r3, #2
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	330c      	adds	r3, #12
 800814e:	2202      	movs	r2, #2
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f8eb 	bl	800832e <USBD_CtlSendData>
      break;
 8008158:	e004      	b.n	8008164 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f875 	bl	800824c <USBD_CtlError>
      break;
 8008162:	bf00      	nop
  }
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	885b      	ldrh	r3, [r3, #2]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d106      	bne.n	800818c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f92b 	bl	80083e2 <USBD_CtlSendStatus>
  }
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d80b      	bhi.n	80081c4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	885b      	ldrh	r3, [r3, #2]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d10c      	bne.n	80081ce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f910 	bl	80083e2 <USBD_CtlSendStatus>
      }
      break;
 80081c2:	e004      	b.n	80081ce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f840 	bl	800824c <USBD_CtlError>
      break;
 80081cc:	e000      	b.n	80081d0 <USBD_ClrFeature+0x3c>
      break;
 80081ce:	bf00      	nop
  }
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	781a      	ldrb	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3301      	adds	r3, #1
 80081f2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	781a      	ldrb	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3301      	adds	r3, #1
 8008200:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f7ff fabb 	bl	800777e <SWAPBYTE>
 8008208:	4603      	mov	r3, r0
 800820a:	461a      	mov	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f7ff faae 	bl	800777e <SWAPBYTE>
 8008222:	4603      	mov	r3, r0
 8008224:	461a      	mov	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3301      	adds	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3301      	adds	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f7ff faa1 	bl	800777e <SWAPBYTE>
 800823c:	4603      	mov	r3, r0
 800823e:	461a      	mov	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	80da      	strh	r2, [r3, #6]
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008256:	2180      	movs	r1, #128	; 0x80
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fd75 	bl	8008d48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800825e:	2100      	movs	r1, #0
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fd71 	bl	8008d48 <USBD_LL_StallEP>
}
 8008266:	bf00      	nop
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b086      	sub	sp, #24
 8008272:	af00      	add	r7, sp, #0
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d036      	beq.n	80082f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008288:	6938      	ldr	r0, [r7, #16]
 800828a:	f000 f836 	bl	80082fa <USBD_GetLen>
 800828e:	4603      	mov	r3, r0
 8008290:	3301      	adds	r3, #1
 8008292:	b29b      	uxth	r3, r3
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	b29a      	uxth	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	4413      	add	r3, r2
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	7812      	ldrb	r2, [r2, #0]
 80082a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	3301      	adds	r3, #1
 80082ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	4413      	add	r3, r2
 80082b4:	2203      	movs	r2, #3
 80082b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	3301      	adds	r3, #1
 80082bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082be:	e013      	b.n	80082e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	4413      	add	r3, r2
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	7812      	ldrb	r2, [r2, #0]
 80082ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	3301      	adds	r3, #1
 80082d0:	613b      	str	r3, [r7, #16]
    idx++;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	3301      	adds	r3, #1
 80082d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	4413      	add	r3, r2
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
    idx++;
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	3301      	adds	r3, #1
 80082e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e7      	bne.n	80082c0 <USBD_GetString+0x52>
 80082f0:	e000      	b.n	80082f4 <USBD_GetString+0x86>
    return;
 80082f2:	bf00      	nop
  }
}
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b085      	sub	sp, #20
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800830a:	e005      	b.n	8008318 <USBD_GetLen+0x1e>
  {
    len++;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	3301      	adds	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	3301      	adds	r3, #1
 8008316:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1f5      	bne.n	800830c <USBD_GetLen+0x12>
  }

  return len;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2202      	movs	r2, #2
 800833e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	2100      	movs	r1, #0
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 fdc5 	bl	8008ee4 <USBD_LL_Transmit>

  return USBD_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	2100      	movs	r1, #0
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fdb4 	bl	8008ee4 <USBD_LL_Transmit>

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2203      	movs	r2, #3
 8008396:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	2100      	movs	r1, #0
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 fdcf 	bl	8008f54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	2100      	movs	r1, #0
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 fdbe 	bl	8008f54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2204      	movs	r2, #4
 80083ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083f2:	2300      	movs	r3, #0
 80083f4:	2200      	movs	r2, #0
 80083f6:	2100      	movs	r1, #0
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fd73 	bl	8008ee4 <USBD_LL_Transmit>

  return USBD_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2205      	movs	r2, #5
 8008414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008418:	2300      	movs	r3, #0
 800841a:	2200      	movs	r2, #0
 800841c:	2100      	movs	r1, #0
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fd98 	bl	8008f54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008434:	2200      	movs	r2, #0
 8008436:	4912      	ldr	r1, [pc, #72]	; (8008480 <MX_USB_DEVICE_Init+0x50>)
 8008438:	4812      	ldr	r0, [pc, #72]	; (8008484 <MX_USB_DEVICE_Init+0x54>)
 800843a:	f7fe fe8f 	bl	800715c <USBD_Init>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008444:	f7f8 faf8 	bl	8000a38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008448:	490f      	ldr	r1, [pc, #60]	; (8008488 <MX_USB_DEVICE_Init+0x58>)
 800844a:	480e      	ldr	r0, [pc, #56]	; (8008484 <MX_USB_DEVICE_Init+0x54>)
 800844c:	f7fe feb6 	bl	80071bc <USBD_RegisterClass>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008456:	f7f8 faef 	bl	8000a38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800845a:	490c      	ldr	r1, [pc, #48]	; (800848c <MX_USB_DEVICE_Init+0x5c>)
 800845c:	4809      	ldr	r0, [pc, #36]	; (8008484 <MX_USB_DEVICE_Init+0x54>)
 800845e:	f7fe fdd7 	bl	8007010 <USBD_CDC_RegisterInterface>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008468:	f7f8 fae6 	bl	8000a38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800846c:	4805      	ldr	r0, [pc, #20]	; (8008484 <MX_USB_DEVICE_Init+0x54>)
 800846e:	f7fe fecc 	bl	800720a <USBD_Start>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008478:	f7f8 fade 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800847c:	bf00      	nop
 800847e:	bd80      	pop	{r7, pc}
 8008480:	200001a8 	.word	0x200001a8
 8008484:	20000574 	.word	0x20000574
 8008488:	20000090 	.word	0x20000090
 800848c:	20000194 	.word	0x20000194

08008490 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008494:	2200      	movs	r2, #0
 8008496:	4905      	ldr	r1, [pc, #20]	; (80084ac <CDC_Init_FS+0x1c>)
 8008498:	4805      	ldr	r0, [pc, #20]	; (80084b0 <CDC_Init_FS+0x20>)
 800849a:	f7fe fdce 	bl	800703a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800849e:	4905      	ldr	r1, [pc, #20]	; (80084b4 <CDC_Init_FS+0x24>)
 80084a0:	4803      	ldr	r0, [pc, #12]	; (80084b0 <CDC_Init_FS+0x20>)
 80084a2:	f7fe fde8 	bl	8007076 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20001044 	.word	0x20001044
 80084b0:	20000574 	.word	0x20000574
 80084b4:	20000844 	.word	0x20000844

080084b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084be:	4618      	mov	r0, r3
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	4603      	mov	r3, r0
 80084d0:	6039      	str	r1, [r7, #0]
 80084d2:	71fb      	strb	r3, [r7, #7]
 80084d4:	4613      	mov	r3, r2
 80084d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	2b23      	cmp	r3, #35	; 0x23
 80084dc:	d84a      	bhi.n	8008574 <CDC_Control_FS+0xac>
 80084de:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <CDC_Control_FS+0x1c>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008575 	.word	0x08008575
 80084e8:	08008575 	.word	0x08008575
 80084ec:	08008575 	.word	0x08008575
 80084f0:	08008575 	.word	0x08008575
 80084f4:	08008575 	.word	0x08008575
 80084f8:	08008575 	.word	0x08008575
 80084fc:	08008575 	.word	0x08008575
 8008500:	08008575 	.word	0x08008575
 8008504:	08008575 	.word	0x08008575
 8008508:	08008575 	.word	0x08008575
 800850c:	08008575 	.word	0x08008575
 8008510:	08008575 	.word	0x08008575
 8008514:	08008575 	.word	0x08008575
 8008518:	08008575 	.word	0x08008575
 800851c:	08008575 	.word	0x08008575
 8008520:	08008575 	.word	0x08008575
 8008524:	08008575 	.word	0x08008575
 8008528:	08008575 	.word	0x08008575
 800852c:	08008575 	.word	0x08008575
 8008530:	08008575 	.word	0x08008575
 8008534:	08008575 	.word	0x08008575
 8008538:	08008575 	.word	0x08008575
 800853c:	08008575 	.word	0x08008575
 8008540:	08008575 	.word	0x08008575
 8008544:	08008575 	.word	0x08008575
 8008548:	08008575 	.word	0x08008575
 800854c:	08008575 	.word	0x08008575
 8008550:	08008575 	.word	0x08008575
 8008554:	08008575 	.word	0x08008575
 8008558:	08008575 	.word	0x08008575
 800855c:	08008575 	.word	0x08008575
 8008560:	08008575 	.word	0x08008575
 8008564:	08008575 	.word	0x08008575
 8008568:	08008575 	.word	0x08008575
 800856c:	08008575 	.word	0x08008575
 8008570:	08008575 	.word	0x08008575
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008574:	bf00      	nop
  }

  return (USBD_OK);
 8008576:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //Запись данных из буфера CDC в буфер для функции main
  MsgFromUsb = Buf;
 800858e:	4a09      	ldr	r2, [pc, #36]	; (80085b4 <CDC_Receive_FS+0x30>)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6013      	str	r3, [r2, #0]
  NewMsgBit = 1;
 8008594:	4b08      	ldr	r3, [pc, #32]	; (80085b8 <CDC_Receive_FS+0x34>)
 8008596:	2201      	movs	r2, #1
 8008598:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	4807      	ldr	r0, [pc, #28]	; (80085bc <CDC_Receive_FS+0x38>)
 800859e:	f7fe fd6a 	bl	8007076 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085a2:	4806      	ldr	r0, [pc, #24]	; (80085bc <CDC_Receive_FS+0x38>)
 80085a4:	f7fe fdb0 	bl	8007108 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20001844 	.word	0x20001844
 80085b8:	20000227 	.word	0x20000227
 80085bc:	20000574 	.word	0x20000574

080085c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085d0:	4b0d      	ldr	r3, [pc, #52]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e00b      	b.n	80085fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4806      	ldr	r0, [pc, #24]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085ee:	f7fe fd24 	bl	800703a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085f4:	f7fe fd58 	bl	80070a8 <USBD_CDC_TransmitPacket>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000574 	.word	0x20000574

0800860c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800861e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008622:	4618      	mov	r0, r3
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
	...

08008630 <USB_Rx_Msg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
//Функция, которая передаст данные с USB в функцию main
uint8_t* USB_Rx_Msg (void) {
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
	if (NewMsgBit) {
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <USB_Rx_Msg+0x24>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <USB_Rx_Msg+0x18>
		NewMsgBit = 0;
 800863c:	4b05      	ldr	r3, [pc, #20]	; (8008654 <USB_Rx_Msg+0x24>)
 800863e:	2200      	movs	r2, #0
 8008640:	701a      	strb	r2, [r3, #0]
		return MsgFromUsb;
 8008642:	4b05      	ldr	r3, [pc, #20]	; (8008658 <USB_Rx_Msg+0x28>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	e000      	b.n	800864a <USB_Rx_Msg+0x1a>
	}
	else return 0;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	20000227 	.word	0x20000227
 8008658:	20001844 	.word	0x20001844

0800865c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2212      	movs	r2, #18
 800866c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800866e:	4b03      	ldr	r3, [pc, #12]	; (800867c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	200001c4 	.word	0x200001c4

08008680 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2204      	movs	r2, #4
 8008690:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008692:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	200001d8 	.word	0x200001d8

080086a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	4603      	mov	r3, r0
 80086ac:	6039      	str	r1, [r7, #0]
 80086ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d105      	bne.n	80086c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	4907      	ldr	r1, [pc, #28]	; (80086d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80086ba:	4808      	ldr	r0, [pc, #32]	; (80086dc <USBD_FS_ProductStrDescriptor+0x38>)
 80086bc:	f7ff fdd7 	bl	800826e <USBD_GetString>
 80086c0:	e004      	b.n	80086cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	4904      	ldr	r1, [pc, #16]	; (80086d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80086c6:	4805      	ldr	r0, [pc, #20]	; (80086dc <USBD_FS_ProductStrDescriptor+0x38>)
 80086c8:	f7ff fdd1 	bl	800826e <USBD_GetString>
  }
  return USBD_StrDesc;
 80086cc:	4b02      	ldr	r3, [pc, #8]	; (80086d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	20001848 	.word	0x20001848
 80086dc:	08009098 	.word	0x08009098

080086e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	6039      	str	r1, [r7, #0]
 80086ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	4904      	ldr	r1, [pc, #16]	; (8008700 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086f0:	4804      	ldr	r0, [pc, #16]	; (8008704 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086f2:	f7ff fdbc 	bl	800826e <USBD_GetString>
  return USBD_StrDesc;
 80086f6:	4b02      	ldr	r3, [pc, #8]	; (8008700 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	20001848 	.word	0x20001848
 8008704:	080090b0 	.word	0x080090b0

08008708 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	6039      	str	r1, [r7, #0]
 8008712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	221a      	movs	r2, #26
 8008718:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800871a:	f000 f843 	bl	80087a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800871e:	4b02      	ldr	r3, [pc, #8]	; (8008728 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	200001dc 	.word	0x200001dc

0800872c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	6039      	str	r1, [r7, #0]
 8008736:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d105      	bne.n	800874a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	4907      	ldr	r1, [pc, #28]	; (8008760 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008742:	4808      	ldr	r0, [pc, #32]	; (8008764 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008744:	f7ff fd93 	bl	800826e <USBD_GetString>
 8008748:	e004      	b.n	8008754 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	4904      	ldr	r1, [pc, #16]	; (8008760 <USBD_FS_ConfigStrDescriptor+0x34>)
 800874e:	4805      	ldr	r0, [pc, #20]	; (8008764 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008750:	f7ff fd8d 	bl	800826e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008754:	4b02      	ldr	r3, [pc, #8]	; (8008760 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20001848 	.word	0x20001848
 8008764:	080090c4 	.word	0x080090c4

08008768 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	6039      	str	r1, [r7, #0]
 8008772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008774:	79fb      	ldrb	r3, [r7, #7]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d105      	bne.n	8008786 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	4907      	ldr	r1, [pc, #28]	; (800879c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800877e:	4808      	ldr	r0, [pc, #32]	; (80087a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008780:	f7ff fd75 	bl	800826e <USBD_GetString>
 8008784:	e004      	b.n	8008790 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	4904      	ldr	r1, [pc, #16]	; (800879c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800878a:	4805      	ldr	r0, [pc, #20]	; (80087a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800878c:	f7ff fd6f 	bl	800826e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008790:	4b02      	ldr	r3, [pc, #8]	; (800879c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20001848 	.word	0x20001848
 80087a0:	080090d0 	.word	0x080090d0

080087a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80087aa:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <Get_SerialNum+0x44>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087b0:	4b0e      	ldr	r3, [pc, #56]	; (80087ec <Get_SerialNum+0x48>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087b6:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <Get_SerialNum+0x4c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4413      	add	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d009      	beq.n	80087de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087ca:	2208      	movs	r2, #8
 80087cc:	4909      	ldr	r1, [pc, #36]	; (80087f4 <Get_SerialNum+0x50>)
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f000 f814 	bl	80087fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087d4:	2204      	movs	r2, #4
 80087d6:	4908      	ldr	r1, [pc, #32]	; (80087f8 <Get_SerialNum+0x54>)
 80087d8:	68b8      	ldr	r0, [r7, #8]
 80087da:	f000 f80f 	bl	80087fc <IntToUnicode>
  }
}
 80087de:	bf00      	nop
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	1fff7590 	.word	0x1fff7590
 80087ec:	1fff7594 	.word	0x1fff7594
 80087f0:	1fff7598 	.word	0x1fff7598
 80087f4:	200001de 	.word	0x200001de
 80087f8:	200001ee 	.word	0x200001ee

080087fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4613      	mov	r3, r2
 8008808:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800880e:	2300      	movs	r3, #0
 8008810:	75fb      	strb	r3, [r7, #23]
 8008812:	e027      	b.n	8008864 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	0f1b      	lsrs	r3, r3, #28
 8008818:	2b09      	cmp	r3, #9
 800881a:	d80b      	bhi.n	8008834 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	0f1b      	lsrs	r3, r3, #28
 8008820:	b2da      	uxtb	r2, r3
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	4619      	mov	r1, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	440b      	add	r3, r1
 800882c:	3230      	adds	r2, #48	; 0x30
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	e00a      	b.n	800884a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	0f1b      	lsrs	r3, r3, #28
 8008838:	b2da      	uxtb	r2, r3
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	4619      	mov	r1, r3
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	440b      	add	r3, r1
 8008844:	3237      	adds	r2, #55	; 0x37
 8008846:	b2d2      	uxtb	r2, r2
 8008848:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	011b      	lsls	r3, r3, #4
 800884e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	3301      	adds	r3, #1
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	4413      	add	r3, r2
 800885a:	2200      	movs	r2, #0
 800885c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	3301      	adds	r3, #1
 8008862:	75fb      	strb	r3, [r7, #23]
 8008864:	7dfa      	ldrb	r2, [r7, #23]
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	429a      	cmp	r2, r3
 800886a:	d3d3      	bcc.n	8008814 <IntToUnicode+0x18>
  }
}
 800886c:	bf00      	nop
 800886e:	bf00      	nop
 8008870:	371c      	adds	r7, #28
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
	...

0800887c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	; 0x28
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008884:	f107 0314 	add.w	r3, r7, #20
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	605a      	str	r2, [r3, #4]
 800888e:	609a      	str	r2, [r3, #8]
 8008890:	60da      	str	r2, [r3, #12]
 8008892:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800889c:	d15c      	bne.n	8008958 <HAL_PCD_MspInit+0xdc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800889e:	4b30      	ldr	r3, [pc, #192]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 80088a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a2:	4a2f      	ldr	r2, [pc, #188]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 80088a4:	f043 0301 	orr.w	r3, r3, #1
 80088a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088aa:	4b2d      	ldr	r3, [pc, #180]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 80088ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	613b      	str	r3, [r7, #16]
 80088b4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80088b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80088ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088bc:	2302      	movs	r3, #2
 80088be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c0:	2300      	movs	r3, #0
 80088c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088c4:	2303      	movs	r3, #3
 80088c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088c8:	230a      	movs	r3, #10
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088cc:	f107 0314 	add.w	r3, r7, #20
 80088d0:	4619      	mov	r1, r3
 80088d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088d6:	f7f9 faf9 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80088da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80088e8:	f107 0314 	add.w	r3, r7, #20
 80088ec:	4619      	mov	r1, r3
 80088ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088f2:	f7f9 faeb 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088f6:	4b1a      	ldr	r3, [pc, #104]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 80088f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088fa:	4a19      	ldr	r2, [pc, #100]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 80088fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008902:	4b17      	ldr	r3, [pc, #92]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 8008904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800890e:	4b14      	ldr	r3, [pc, #80]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 8008910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d114      	bne.n	8008944 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800891a:	4b11      	ldr	r3, [pc, #68]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 800891c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891e:	4a10      	ldr	r2, [pc, #64]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 8008920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008924:	6593      	str	r3, [r2, #88]	; 0x58
 8008926:	4b0e      	ldr	r3, [pc, #56]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 8008928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800892a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800892e:	60bb      	str	r3, [r7, #8]
 8008930:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008932:	f7fa fe17 	bl	8003564 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008936:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 8008938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893a:	4a09      	ldr	r2, [pc, #36]	; (8008960 <HAL_PCD_MspInit+0xe4>)
 800893c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008940:	6593      	str	r3, [r2, #88]	; 0x58
 8008942:	e001      	b.n	8008948 <HAL_PCD_MspInit+0xcc>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008944:	f7fa fe0e 	bl	8003564 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008948:	2200      	movs	r2, #0
 800894a:	2100      	movs	r1, #0
 800894c:	2043      	movs	r0, #67	; 0x43
 800894e:	f7f9 fa78 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008952:	2043      	movs	r0, #67	; 0x43
 8008954:	f7f9 fa91 	bl	8001e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008958:	bf00      	nop
 800895a:	3728      	adds	r7, #40	; 0x28
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	40021000 	.word	0x40021000

08008964 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008978:	4619      	mov	r1, r3
 800897a:	4610      	mov	r0, r2
 800897c:	f7fe fc90 	bl	80072a0 <USBD_LL_SetupStage>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	4613      	mov	r3, r2
 80089a0:	00db      	lsls	r3, r3, #3
 80089a2:	1a9b      	subs	r3, r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	440b      	add	r3, r1
 80089a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	4619      	mov	r1, r3
 80089b2:	f7fe fcca 	bl	800734a <USBD_LL_DataOutStage>
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	460b      	mov	r3, r1
 80089c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80089d0:	78fa      	ldrb	r2, [r7, #3]
 80089d2:	6879      	ldr	r1, [r7, #4]
 80089d4:	4613      	mov	r3, r2
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	1a9b      	subs	r3, r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	440b      	add	r3, r1
 80089de:	3348      	adds	r3, #72	; 0x48
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	4619      	mov	r1, r3
 80089e6:	f7fe fd13 	bl	8007410 <USBD_LL_DataInStage>
}
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fe fe27 	bl	8007654 <USBD_LL_SOF>
}
 8008a06:	bf00      	nop
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a16:	2301      	movs	r3, #1
 8008a18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d001      	beq.n	8008a26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a22:	f7f8 f809 	bl	8000a38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a2c:	7bfa      	ldrb	r2, [r7, #15]
 8008a2e:	4611      	mov	r1, r2
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fdd1 	bl	80075d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fe fd7d 	bl	800753c <USBD_LL_Reset>
}
 8008a42:	bf00      	nop
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a66:	f043 0301 	orr.w	r3, r3, #1
 8008a6a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fe fdc0 	bl	80075f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d005      	beq.n	8008a8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a80:	4b04      	ldr	r3, [pc, #16]	; (8008a94 <HAL_PCD_SuspendCallback+0x48>)
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	4a03      	ldr	r2, [pc, #12]	; (8008a94 <HAL_PCD_SuspendCallback+0x48>)
 8008a86:	f043 0306 	orr.w	r3, r3, #6
 8008a8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a8c:	bf00      	nop
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	e000ed00 	.word	0xe000ed00

08008a98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6812      	ldr	r2, [r2, #0]
 8008aae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ab2:	f023 0301 	bic.w	r3, r3, #1
 8008ab6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d007      	beq.n	8008ad0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ac0:	4b08      	ldr	r3, [pc, #32]	; (8008ae4 <HAL_PCD_ResumeCallback+0x4c>)
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	4a07      	ldr	r2, [pc, #28]	; (8008ae4 <HAL_PCD_ResumeCallback+0x4c>)
 8008ac6:	f023 0306 	bic.w	r3, r3, #6
 8008aca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008acc:	f000 faa6 	bl	800901c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fda4 	bl	8007624 <USBD_LL_Resume>
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	e000ed00 	.word	0xe000ed00

08008ae8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008afa:	78fa      	ldrb	r2, [r7, #3]
 8008afc:	4611      	mov	r1, r2
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe fdf0 	bl	80076e4 <USBD_LL_IsoOUTIncomplete>
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe fdb8 	bl	8007698 <USBD_LL_IsoINIncomplete>
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fdf6 	bl	8007730 <USBD_LL_DevConnected>
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fdf3 	bl	8007746 <USBD_LL_DevDisconnected>
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d139      	bne.n	8008bec <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b78:	4a1f      	ldr	r2, [pc, #124]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a1d      	ldr	r2, [pc, #116]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008b84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b88:	4b1b      	ldr	r3, [pc, #108]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008b8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008b90:	4b19      	ldr	r3, [pc, #100]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008b92:	2206      	movs	r2, #6
 8008b94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b96:	4b18      	ldr	r3, [pc, #96]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008b98:	2202      	movs	r2, #2
 8008b9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b9c:	4b16      	ldr	r3, [pc, #88]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ba2:	4b15      	ldr	r3, [pc, #84]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ba8:	4b13      	ldr	r3, [pc, #76]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008bae:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008bb4:	4b10      	ldr	r3, [pc, #64]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008bba:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008bc0:	480d      	ldr	r0, [pc, #52]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008bc2:	f7f9 fb5f 	bl	8002284 <HAL_PCD_Init>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8008bcc:	f7f7 ff34 	bl	8000a38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008bd0:	2180      	movs	r1, #128	; 0x80
 8008bd2:	4809      	ldr	r0, [pc, #36]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008bd4:	f7fa fbc1 	bl	800335a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008bd8:	2240      	movs	r2, #64	; 0x40
 8008bda:	2100      	movs	r1, #0
 8008bdc:	4806      	ldr	r0, [pc, #24]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008bde:	f7fa fb75 	bl	80032cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008be2:	2280      	movs	r2, #128	; 0x80
 8008be4:	2101      	movs	r1, #1
 8008be6:	4804      	ldr	r0, [pc, #16]	; (8008bf8 <USBD_LL_Init+0x90>)
 8008be8:	f7fa fb70 	bl	80032cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20001a48 	.word	0x20001a48

08008bfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7f9 fc5a 	bl	80024cc <HAL_PCD_Start>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d816      	bhi.n	8008c50 <USBD_LL_Start+0x54>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <USBD_LL_Start+0x2c>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c39 	.word	0x08008c39
 8008c2c:	08008c3f 	.word	0x08008c3f
 8008c30:	08008c45 	.word	0x08008c45
 8008c34:	08008c4b 	.word	0x08008c4b
    case HAL_OK :
      usb_status = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3c:	e00b      	b.n	8008c56 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	73fb      	strb	r3, [r7, #15]
    break;
 8008c42:	e008      	b.n	8008c56 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c44:	2301      	movs	r3, #1
 8008c46:	73fb      	strb	r3, [r7, #15]
    break;
 8008c48:	e005      	b.n	8008c56 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4e:	e002      	b.n	8008c56 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008c50:	2303      	movs	r3, #3
 8008c52:	73fb      	strb	r3, [r7, #15]
    break;
 8008c54:	bf00      	nop
  }
  return usb_status;
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	4608      	mov	r0, r1
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4603      	mov	r3, r0
 8008c70:	70fb      	strb	r3, [r7, #3]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70bb      	strb	r3, [r7, #2]
 8008c76:	4613      	mov	r3, r2
 8008c78:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c88:	78bb      	ldrb	r3, [r7, #2]
 8008c8a:	883a      	ldrh	r2, [r7, #0]
 8008c8c:	78f9      	ldrb	r1, [r7, #3]
 8008c8e:	f7fa f815 	bl	8002cbc <HAL_PCD_EP_Open>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d817      	bhi.n	8008ccc <USBD_LL_OpenEP+0x6c>
 8008c9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ca4 <USBD_LL_OpenEP+0x44>)
 8008c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca2:	bf00      	nop
 8008ca4:	08008cb5 	.word	0x08008cb5
 8008ca8:	08008cbb 	.word	0x08008cbb
 8008cac:	08008cc1 	.word	0x08008cc1
 8008cb0:	08008cc7 	.word	0x08008cc7
    case HAL_OK :
      usb_status = USBD_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb8:	e00b      	b.n	8008cd2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cbe:	e008      	b.n	8008cd2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc4:	e005      	b.n	8008cd2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cca:	e002      	b.n	8008cd2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd0:	bf00      	nop
  }
  return usb_status;
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cf6:	78fa      	ldrb	r2, [r7, #3]
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fa f846 	bl	8002d8c <HAL_PCD_EP_Close>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d816      	bhi.n	8008d38 <USBD_LL_CloseEP+0x5c>
 8008d0a:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <USBD_LL_CloseEP+0x34>)
 8008d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d10:	08008d21 	.word	0x08008d21
 8008d14:	08008d27 	.word	0x08008d27
 8008d18:	08008d2d 	.word	0x08008d2d
 8008d1c:	08008d33 	.word	0x08008d33
    case HAL_OK :
      usb_status = USBD_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]
    break;
 8008d24:	e00b      	b.n	8008d3e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d26:	2303      	movs	r3, #3
 8008d28:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2a:	e008      	b.n	8008d3e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d30:	e005      	b.n	8008d3e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d32:	2303      	movs	r3, #3
 8008d34:	73fb      	strb	r3, [r7, #15]
    break;
 8008d36:	e002      	b.n	8008d3e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d3c:	bf00      	nop
  }
  return usb_status;
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d62:	78fa      	ldrb	r2, [r7, #3]
 8008d64:	4611      	mov	r1, r2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fa f8ed 	bl	8002f46 <HAL_PCD_EP_SetStall>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d816      	bhi.n	8008da4 <USBD_LL_StallEP+0x5c>
 8008d76:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <USBD_LL_StallEP+0x34>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008d8d 	.word	0x08008d8d
 8008d80:	08008d93 	.word	0x08008d93
 8008d84:	08008d99 	.word	0x08008d99
 8008d88:	08008d9f 	.word	0x08008d9f
    case HAL_OK :
      usb_status = USBD_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d90:	e00b      	b.n	8008daa <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d92:	2303      	movs	r3, #3
 8008d94:	73fb      	strb	r3, [r7, #15]
    break;
 8008d96:	e008      	b.n	8008daa <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9c:	e005      	b.n	8008daa <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	73fb      	strb	r3, [r7, #15]
    break;
 8008da2:	e002      	b.n	8008daa <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	73fb      	strb	r3, [r7, #15]
    break;
 8008da8:	bf00      	nop
  }
  return usb_status;
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dce:	78fa      	ldrb	r2, [r7, #3]
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fa f919 	bl	800300a <HAL_PCD_EP_ClrStall>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d816      	bhi.n	8008e10 <USBD_LL_ClearStallEP+0x5c>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <USBD_LL_ClearStallEP+0x34>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008df9 	.word	0x08008df9
 8008dec:	08008dff 	.word	0x08008dff
 8008df0:	08008e05 	.word	0x08008e05
 8008df4:	08008e0b 	.word	0x08008e0b
    case HAL_OK :
      usb_status = USBD_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008dfc:	e00b      	b.n	8008e16 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	73fb      	strb	r3, [r7, #15]
    break;
 8008e02:	e008      	b.n	8008e16 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e04:	2301      	movs	r3, #1
 8008e06:	73fb      	strb	r3, [r7, #15]
    break;
 8008e08:	e005      	b.n	8008e16 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0e:	e002      	b.n	8008e16 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008e10:	2303      	movs	r3, #3
 8008e12:	73fb      	strb	r3, [r7, #15]
    break;
 8008e14:	bf00      	nop
  }
  return usb_status;
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	da0b      	bge.n	8008e54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e3c:	78fb      	ldrb	r3, [r7, #3]
 8008e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e42:	68f9      	ldr	r1, [r7, #12]
 8008e44:	4613      	mov	r3, r2
 8008e46:	00db      	lsls	r3, r3, #3
 8008e48:	1a9b      	subs	r3, r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	440b      	add	r3, r1
 8008e4e:	333e      	adds	r3, #62	; 0x3e
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	e00b      	b.n	8008e6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e5a:	68f9      	ldr	r1, [r7, #12]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	00db      	lsls	r3, r3, #3
 8008e60:	1a9b      	subs	r3, r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	440b      	add	r3, r1
 8008e66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e92:	78fa      	ldrb	r2, [r7, #3]
 8008e94:	4611      	mov	r1, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7f9 feeb 	bl	8002c72 <HAL_PCD_SetAddress>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ea0:	7bbb      	ldrb	r3, [r7, #14]
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d816      	bhi.n	8008ed4 <USBD_LL_SetUSBAddress+0x5c>
 8008ea6:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <USBD_LL_SetUSBAddress+0x34>)
 8008ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eac:	08008ebd 	.word	0x08008ebd
 8008eb0:	08008ec3 	.word	0x08008ec3
 8008eb4:	08008ec9 	.word	0x08008ec9
 8008eb8:	08008ecf 	.word	0x08008ecf
    case HAL_OK :
      usb_status = USBD_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec0:	e00b      	b.n	8008eda <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec6:	e008      	b.n	8008eda <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ecc:	e005      	b.n	8008eda <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed2:	e002      	b.n	8008eda <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed8:	bf00      	nop
  }
  return usb_status;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	607a      	str	r2, [r7, #4]
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f02:	7af9      	ldrb	r1, [r7, #11]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	f7f9 ffe0 	bl	8002ecc <HAL_PCD_EP_Transmit>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008f10:	7dbb      	ldrb	r3, [r7, #22]
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d816      	bhi.n	8008f44 <USBD_LL_Transmit+0x60>
 8008f16:	a201      	add	r2, pc, #4	; (adr r2, 8008f1c <USBD_LL_Transmit+0x38>)
 8008f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1c:	08008f2d 	.word	0x08008f2d
 8008f20:	08008f33 	.word	0x08008f33
 8008f24:	08008f39 	.word	0x08008f39
 8008f28:	08008f3f 	.word	0x08008f3f
    case HAL_OK :
      usb_status = USBD_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	75fb      	strb	r3, [r7, #23]
    break;
 8008f30:	e00b      	b.n	8008f4a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f32:	2303      	movs	r3, #3
 8008f34:	75fb      	strb	r3, [r7, #23]
    break;
 8008f36:	e008      	b.n	8008f4a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	75fb      	strb	r3, [r7, #23]
    break;
 8008f3c:	e005      	b.n	8008f4a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	75fb      	strb	r3, [r7, #23]
    break;
 8008f42:	e002      	b.n	8008f4a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008f44:	2303      	movs	r3, #3
 8008f46:	75fb      	strb	r3, [r7, #23]
    break;
 8008f48:	bf00      	nop
  }
  return usb_status;
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	607a      	str	r2, [r7, #4]
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	460b      	mov	r3, r1
 8008f62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f72:	7af9      	ldrb	r1, [r7, #11]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	f7f9 ff52 	bl	8002e20 <HAL_PCD_EP_Receive>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008f80:	7dbb      	ldrb	r3, [r7, #22]
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d816      	bhi.n	8008fb4 <USBD_LL_PrepareReceive+0x60>
 8008f86:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <USBD_LL_PrepareReceive+0x38>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08008f9d 	.word	0x08008f9d
 8008f90:	08008fa3 	.word	0x08008fa3
 8008f94:	08008fa9 	.word	0x08008fa9
 8008f98:	08008faf 	.word	0x08008faf
    case HAL_OK :
      usb_status = USBD_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	75fb      	strb	r3, [r7, #23]
    break;
 8008fa0:	e00b      	b.n	8008fba <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	75fb      	strb	r3, [r7, #23]
    break;
 8008fa6:	e008      	b.n	8008fba <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	75fb      	strb	r3, [r7, #23]
    break;
 8008fac:	e005      	b.n	8008fba <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	75fb      	strb	r3, [r7, #23]
    break;
 8008fb2:	e002      	b.n	8008fba <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	75fb      	strb	r3, [r7, #23]
    break;
 8008fb8:	bf00      	nop
  }
  return usb_status;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7f9 ff5e 	bl	8002e9c <HAL_PCD_EP_GetRxCount>
 8008fe0:	4603      	mov	r3, r0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ff4:	4b03      	ldr	r3, [pc, #12]	; (8009004 <USBD_static_malloc+0x18>)
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000228 	.word	0x20000228

08009008 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]

}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009020:	f7f7 fc8e 	bl	8000940 <SystemClock_Config>
}
 8009024:	bf00      	nop
 8009026:	bd80      	pop	{r7, pc}

08009028 <__libc_init_array>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	4d0d      	ldr	r5, [pc, #52]	; (8009060 <__libc_init_array+0x38>)
 800902c:	4c0d      	ldr	r4, [pc, #52]	; (8009064 <__libc_init_array+0x3c>)
 800902e:	1b64      	subs	r4, r4, r5
 8009030:	10a4      	asrs	r4, r4, #2
 8009032:	2600      	movs	r6, #0
 8009034:	42a6      	cmp	r6, r4
 8009036:	d109      	bne.n	800904c <__libc_init_array+0x24>
 8009038:	4d0b      	ldr	r5, [pc, #44]	; (8009068 <__libc_init_array+0x40>)
 800903a:	4c0c      	ldr	r4, [pc, #48]	; (800906c <__libc_init_array+0x44>)
 800903c:	f000 f820 	bl	8009080 <_init>
 8009040:	1b64      	subs	r4, r4, r5
 8009042:	10a4      	asrs	r4, r4, #2
 8009044:	2600      	movs	r6, #0
 8009046:	42a6      	cmp	r6, r4
 8009048:	d105      	bne.n	8009056 <__libc_init_array+0x2e>
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009050:	4798      	blx	r3
 8009052:	3601      	adds	r6, #1
 8009054:	e7ee      	b.n	8009034 <__libc_init_array+0xc>
 8009056:	f855 3b04 	ldr.w	r3, [r5], #4
 800905a:	4798      	blx	r3
 800905c:	3601      	adds	r6, #1
 800905e:	e7f2      	b.n	8009046 <__libc_init_array+0x1e>
 8009060:	08009120 	.word	0x08009120
 8009064:	08009120 	.word	0x08009120
 8009068:	08009120 	.word	0x08009120
 800906c:	08009124 	.word	0x08009124

08009070 <memset>:
 8009070:	4402      	add	r2, r0
 8009072:	4603      	mov	r3, r0
 8009074:	4293      	cmp	r3, r2
 8009076:	d100      	bne.n	800907a <memset+0xa>
 8009078:	4770      	bx	lr
 800907a:	f803 1b01 	strb.w	r1, [r3], #1
 800907e:	e7f9      	b.n	8009074 <memset+0x4>

08009080 <_init>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	bf00      	nop
 8009084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009086:	bc08      	pop	{r3}
 8009088:	469e      	mov	lr, r3
 800908a:	4770      	bx	lr

0800908c <_fini>:
 800908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908e:	bf00      	nop
 8009090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009092:	bc08      	pop	{r3}
 8009094:	469e      	mov	lr, r3
 8009096:	4770      	bx	lr
